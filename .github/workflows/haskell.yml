name: Deploy

on:
  push:
    branches: [master]

env:
  LANG: C.UTF-8
  LD_LIBRARY_PATH: '/usr/local/lib:$LD_LIBRARY_PATH'

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: freckle/stack-cache-action@main
      # - uses: freckle/stack-action@v5
      - uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.10.2
          enable-stack: true
          stack-version: 'latest'
      - name: Install OpenSSL, protoc and snappy
        run: sudo apt-get update && sudo apt-get install -y libssl-dev librdkafka-dev libgrpc-dev>=1.55 protobuf-compiler libsnappy-dev # or "brew install openssl" for macOS
      - name: Set OpenSSL Paths
        run: |
          export OPENSSL_INCLUDE_DIR=$(pkg-config --variable=includedir openssl)
          export OPENSSL_LIB_DIR=$(pkg-config --variable=libdir openssl)
      - name: Setup node env
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - run: npx tailwindcss  -i ./static/public/assets/css/tailwind.css -o ./static/public/assets/css/tailwind.min.css
      # - run: npx postcss-cli ./static/public/assets/css/tailwind.css -o ./static/public/assets/css/tailwind.min.css
      - name: Build web-components
        run: |
          cd web-components
          npm install
          npm run build

      - run: |
          make prepare-rust-interop
          sudo mkdir -p /usr/local/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/local/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/local/lib/librust_interop.so
          sudo mkdir -p /usr/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/lib/librust_interop.so

      - run: stack --no-terminal build --dependencies-only
      - run: stack build --ghc-options "-O3"
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .stack-work
            ~/.stack
            /usr/local/lib/libCrust_interop.so
            /usr/local/lib/librust_interop.so
            /usr/lib/libCrust_interop.so
            /usr/lib/librust_interop.so
          key: ${{ runner.os }}-stack-${{ hashFiles('stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-

  test:
    name: Test ${{ matrix.test-suite }}
    needs: build
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        test-suite: [doctests, unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: freckle/stack-cache-action@main
      - uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.10.2
          enable-stack: true
          stack-version: 'latest'
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libssl-dev librdkafka-dev libgrpc-dev>=1.55 protobuf-compiler libsnappy-dev
      
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .stack-work
            ~/.stack
            /usr/local/lib/libCrust_interop.so
            /usr/local/lib/librust_interop.so
            /usr/lib/libCrust_interop.so
            /usr/lib/librust_interop.so
          key: ${{ runner.os }}-stack-${{ hashFiles('stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-
            
      - name: Restore Rust libraries
        run: |
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/lib
          
      - name: Run ${{ matrix.test-suite }}
        run: stack test :${{ matrix.test-suite }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: freckle/stack-cache-action@main
      - uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.10.2
          enable-stack: true
          stack-version: 'latest'
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libssl-dev librdkafka-dev libgrpc-dev>=1.55 protobuf-compiler libsnappy-dev
      - name: Setup node env
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - run: npx tailwindcss  -i ./static/public/assets/css/tailwind.css -o ./static/public/assets/css/tailwind.min.css
      - name: Build web-components
        run: |
          cd web-components
          npm install
          npm run build
      
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .stack-work
            ~/.stack
            /usr/local/lib/libCrust_interop.so
            /usr/local/lib/librust_interop.so
            /usr/lib/libCrust_interop.so
            /usr/lib/librust_interop.so
          key: ${{ runner.os }}-stack-${{ hashFiles('stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-
            
      - run: |
          make prepare-rust-interop
          sudo mkdir -p /usr/local/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/local/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/local/lib/librust_interop.so
          sudo mkdir -p /usr/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/lib
          sudo cp rust-interop/target/release/libCrust_interop.so /usr/lib/librust_interop.so
          
      - run: stack install --local-bin-path=. --ghc-options "-O3"
      
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Preset Image Name
        run: echo "IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_URL }}

      - name: Deploy Image to CapRrover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: '${{ secrets.CAPTAINROVER_SERVER }}'
          app: '${{ secrets.CAPTAINROVER_APP_NAME }}'
          token: '${{ secrets.CAPTAINROVER_APP_TOKEN }}'
          image: '${{ env.IMAGE_URL }}'

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
