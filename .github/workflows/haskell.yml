name: Deploy

on:
  push:
    branches: [master]

env:
  LANG: C.UTF-8
  LD_LIBRARY_PATH: '/usr/local/lib:$LD_LIBRARY_PATH'
  CABAL_JOBS: 4

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.10.2
          cabal-version: 'latest'
      - name: Install OpenSSL, protoc and snappy
        run: sudo apt-get update && sudo apt-get install -y libssl-dev librdkafka-dev protobuf-compiler libsnappy-dev # or "brew install openssl" for macOS
      - name: Set OpenSSL Paths
        run: |
          export OPENSSL_INCLUDE_DIR=$(pkg-config --variable=includedir openssl)
          export OPENSSL_LIB_DIR=$(pkg-config --variable=libdir openssl)
      - name: Setup node env
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            web-components/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci --prefer-offline --no-audit
      - run: npx tailwindcss -i ./static/public/assets/css/tailwind.css -o ./static/public/assets/css/tailwind.min.css --minify
      - name: Build web-components
        run: |
          cd web-components
          npm ci --prefer-offline --no-audit
          npm run build

      - name: Cache Cabal dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}
          restore-keys: |
            ${{ runner.os }}-cabal-

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: |
            rust-interop/target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-rust-${{ hashFiles('rust-interop/Cargo.lock', 'rust-interop/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-rust-

      - name: Build Rust interop library
        run: |
          cd rust-interop
          cargo build --release
          cd ..

          # Verify that both static and shared libraries were built
          echo "=== Checking Rust build artifacts ==="
          ls -la rust-interop/target/release/

          # Ensure static library exists
          if [ ! -f "rust-interop/target/release/libCrust_interop.a" ]; then
            echo "ERROR: Static library libCrust_interop.a not found!"
            exit 1
          fi

          # Copy libraries for Cabal build
          mkdir -p dist/build
          cp rust-interop/target/release/libCrust_interop.a dist/build/
          cp rust-interop/target/release/libCrust_interop.so dist/build/ || true
          
          # Copy to system directories for linking
          sudo cp rust-interop/target/release/libCrust_interop.* /usr/local/lib/ || true

          echo "=== Libraries copied to dist/build ==="
          ls -la dist/build/

      - name: Configure project
        run: |
          cabal update
          cabal configure --enable-tests --enable-benchmarks --ghc-options="-O2 -j4"

      - name: Build dependencies
        run: cabal build --only-dependencies all -j4

      - name: Build project
        run: cabal build all -j4

      # Save cache even if subsequent steps fail
      - name: Save Cabal cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./build-output
            ./static
            ./dist
            ./web-components/dist
            ./rust-interop/target/release/libCrust_interop.so
            ./rust-interop/target/release/libCrust_interop.a
          retention-days: 1

      - name: Install to build-output
        run: |
          mkdir -p ./build-output
          cabal list-bins | xargs -I {} cp {} ./build-output/


  test:
    name: Test ${{ matrix.test-suite }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [doctests, unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.10.2
          cabal-version: 'latest'
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libssl-dev librdkafka-dev libgrpc-dev>=1.55 protobuf-compiler libsnappy-dev

      - name: Cache Cabal dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}
          restore-keys: |
            ${{ runner.os }}-cabal-

      - name: Cache Rust build
        uses: actions/cache@v3
        with:
          path: |
            rust-interop/target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-rust-${{ hashFiles('rust-interop/Cargo.lock', 'rust-interop/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-rust-

      - name: Restore Rust libraries
        run: |
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/lib

      - name: Build and setup Rust libraries
        run: |
          # Only build if not cached
          if [ ! -f "rust-interop/target/release/libCrust_interop.so" ]; then
            cd rust-interop && cargo build --release -j4 && cd ..
          fi
          
          # Setup for Cabal
          mkdir -p dist/build
          cp rust-interop/target/release/libCrust_interop.* dist/build/ || true
          sudo cp rust-interop/target/release/libCrust_interop.* /usr/local/lib/ || true

      - name: Configure project
        run: |
          cabal update
          cabal configure --enable-tests

      - name: Run ${{ matrix.test-suite }}
        run: cabal test ${{ matrix.test-suite }} -j4

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts


      - name: Copy binary to root
        run: |
          cp ./build-output/* .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Deploy Image to CapRrover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: '${{ secrets.CAPTAINROVER_SERVER }}'
          app: '${{ secrets.CAPTAINROVER_APP_NAME }}'
          token: '${{ secrets.CAPTAINROVER_APP_TOKEN }}'
          image: 'ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}'
