title: Endpoint Analytics
preview: /public/assets/svgs/screens/http-stats.svg
icon: globe-wifi
refresh_interval: 60s
variables:
  - key: host
    title: Domain
    required: true
    multi: false
    help_text: Domain
    type: query # requires a query that returns 2 fields, an id and a title
    sql: select distinct host from apis.endpoints where project_id='{{project_id}}' limit 500

  - key: endpointHash
    title: Endpoint
    required: true
    multi: false
    help_text: Current filtered endpoint
    reload_on_change: true
    type: query # requires a query that returns 2 fields, an id and a title
    sql: select hash::text, method || ' ' || url_path from apis.endpoints where project_id='{{project_id}}' and host='{{var-host}}' limit 500

widgets:
  # - type: "timeseries_stat"
  #   title: "Requests"
  #   query: requests
  #   unit: reqs
  #   layout: { w: 3, h: 2 }

  - type: group
    title: Overview
    layout: { w: 6, h: 4 }
    children:
      - type: 'timeseries_stat'
        title: 'Requests'
        icon: list-tree
        query: kind=="server" AND hashes[*]=="{{var-endpointHash}}" | summarize count(*) by bin_auto(timestamp)
        unit: reqs
        eager: true
        layout: { w: 7, h: 2 }

      # - type: 'stat'
      #   title: Errors & anomalies
      #   icon: bug
      #   sql: select total_anomalies::float from apis.project_request_stats where project_id='{{project_id}}'::uuid
      #   unit: reqs
      #   eager: true
      #   layout: { w: 5, h: 2 }
      #
      # - type: 'stat'
      #   title: endpoints
      #   icon: list-check
      #   sql: select total_endpoints::float from apis.project_request_stats where project_id='{{project_id}}'::uuid
      #   unit: reqs
      #   eager: true
      #   layout: { w: 4, h: 2 }
      #
      # - type: 'stat'
      #   title: Req shapes
      #   icon: dashboard-list
      #   sql: select total_shapes::float from apis.project_request_stats where project_id='{{project_id}}'::uuid
      #   unit: reqs
      #   eager: true
      #   layout: { w: 4, h: 2 }
      #
      # - type: 'stat'
      #   title: Reqs per min
      #   icon: arrow-down-to-line
      #   sql: select requests_per_min::float from apis.project_request_stats where project_id='{{project_id}}'::uuid
      #   unit: reqs
      #   eager: true
      #   layout: { w: 4, h: 2 }

  # - type: 'anomalies'
  #   title: 'Ongoing issues and monitors'
  #   layout: { w: 6, h: 5 }
  #
  - type: 'timeseries'
    title: 'All requests'
    query: hashes[*]=="{{var-endpointHash}}" | summarize count(*) by bin_auto(timestamp), attributes.http.response.status_code
    unit: reqs
    layout: { w: 6, h: 4 }

  - type: 'timeseries_line'
    title: 'Latency percentiles (ms)'
    hide_subtitle: true
    # query: timechart count(*) by status_code
    # query: timechart p50(duration_ns) as p50, p75(duration_ns) as p75, p90(duration_ns) as p90, p95(duration_ns) as p95 by duration_ns
    summarize_by: max
    sql: |
      SELECT timeB, value, quantile
      FROM (
        SELECT extract(epoch from time_bucket('1h', timestamp))::integer AS timeB,
               ARRAY[
                 (approx_percentile(0.50, percentile_agg(duration)) / 1e6)::float,
                 (approx_percentile(0.75, percentile_agg(duration)) / 1e6)::float,
                 (approx_percentile(0.90, percentile_agg(duration)) / 1e6)::float,
                 (approx_percentile(0.95, percentile_agg(duration)) / 1e6)::float
               ] AS values,
               ARRAY['p50', 'p75', 'p90', 'p95'] AS quantiles
        FROM otel_logs_and_spans 
        WHERE project_id='{{project_id}}' AND '{{var-endpointHash}}'=ANY(hashes) AND kind='server' AND attributes___http___response___status_code IS NOT NULL
          {{time_filter}}
        GROUP BY timeB
      ) s,
      LATERAL unnest(s.values, s.quantiles) AS u(value, quantile);
    layout: { w: 6, h: 4 }

  - type: 'timeseries'
    title: 'Errors'
    theme: 'roma'
    query: kind=="server" AND attributes.http.response.status_code != null AND attributes.http.response.status_code >= 300.0 AND hashes[*]=="{{var-endpointHash}}" | summarize count(*) by bin_auto(timestamp), attributes.http.response.status_code
    layout: { w: 6, h: 4 }
