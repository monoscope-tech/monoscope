{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Opentelemetry.Proto.Collector.Logs.V1.LogsService where

import Control.Applicative ((<$>), (<*>), (<|>))
import Control.Applicative qualified as Hs
import Control.DeepSeq qualified as Hs
import Control.Monad qualified as Hs
import Data.ByteString qualified as Hs
import Data.Coerce qualified as Hs
import Data.Int qualified as Hs (Int16, Int32, Int64)
import Data.List.NonEmpty qualified as Hs (NonEmpty (..))
import Data.Map qualified as Hs (Map, mapKeysMonotonic)
import Data.Proxy qualified as Proxy
import Data.String qualified as Hs (fromString)
import Data.Text.Lazy qualified as Hs (Text)
import Data.Vector qualified as Hs (Vector)
import Data.Word qualified as Hs (Word16, Word32, Word64)
import GHC.Enum qualified as Hs
import GHC.Generics qualified as Hs
import Google.Protobuf.Wrappers.Polymorphic qualified as HsProtobuf (
  Wrapped (..),
 )
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (
  serverLoop,
 )
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC (
  serverLoop,
 )
import Opentelemetry.Proto.Logs.V1.Logs qualified
import Proto3.Suite.Class qualified as HsProtobuf
import Proto3.Suite.DotProto qualified as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import Proto3.Suite.JSONPB qualified as HsJSONPB
import Proto3.Suite.Types qualified as HsProtobuf
import Proto3.Wire qualified as HsProtobuf
import Proto3.Wire.Decode qualified as HsProtobuf (
  Parser,
  RawField,
 )
import Unsafe.Coerce qualified as Hs
import Prelude qualified as Hs


newtype LogsService request response = LogsService
  { logsServiceExport
      :: ( (request 'HsGRPC.Normal Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsServiceRequest Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsServiceResponse)
           -> (Hs.IO (response 'HsGRPC.Normal Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsServiceResponse))
         )
  }
  deriving (Hs.Generic)
logsServiceServer
  :: (LogsService HsGRPC.ServerRequest HsGRPC.ServerResponse)
  -> HsGRPC.ServiceOptions
  -> Hs.IO ()
logsServiceServer
  LogsService{logsServiceExport}
  ( ServiceOptions
      serverHost
      serverPort
      useCompression
      userAgentPrefix
      userAgentSuffix
      initialMetadata
      sslConfig
      logger
      serverMaxReceiveMessageLength
      serverMaxMetadataSize
    ) =
    HsGRPC.serverLoop
      HsGRPC.defaultOptions
        { HsGRPC.optNormalHandlers =
            [ HsGRPC.UnaryHandler
                ( HsGRPC.MethodName
                    "/opentelemetry.proto.collector.logs.v1.LogsService/Export"
                )
                (HsGRPC.convertGeneratedServerHandler logsServiceExport)
            ]
        , HsGRPC.optClientStreamHandlers = []
        , HsGRPC.optServerStreamHandlers = []
        , HsGRPC.optBiDiStreamHandlers = []
        , optServerHost = serverHost
        , optServerPort = serverPort
        , optUseCompression = useCompression
        , optUserAgentPrefix = userAgentPrefix
        , optUserAgentSuffix = userAgentSuffix
        , optInitialMetadata = initialMetadata
        , optSSLConfig = sslConfig
        , optLogger = logger
        , optMaxReceiveMessageLength = serverMaxReceiveMessageLength
        , optMaxMetadataSize = serverMaxMetadataSize
        }
logsServiceClient
  :: HsGRPC.Client
  -> Hs.IO (LogsService HsGRPC.ClientRequest HsGRPC.ClientResult)
logsServiceClient client =
  Hs.pure LogsService
    <*> ( Hs.pure (HsGRPC.clientRequest client)
            <*> HsGRPC.clientRegisterMethod
              client
              ( HsGRPC.MethodName
                  "/opentelemetry.proto.collector.logs.v1.LogsService/Export"
              )
        )
newtype ExportLogsServiceRequest = ExportLogsServiceRequest {exportLogsServiceRequestResourceLogs :: (Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportLogsServiceRequest)
instance (HsProtobuf.Named ExportLogsServiceRequest) where
  nameOf _ = Hs.fromString "ExportLogsServiceRequest"
instance (HsProtobuf.HasDefault ExportLogsServiceRequest)
instance (HsProtobuf.Message ExportLogsServiceRequest) where
  encodeMessage
    _
    ExportLogsServiceRequest{exportLogsServiceRequestResourceLogs} =
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 1)
          ( ( Hs.coerce
                @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
            )
              exportLogsServiceRequestResourceLogs
          )
      )
  decodeMessage _ =
    Hs.pure ExportLogsServiceRequest
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    ( HsProtobufAST.Path
                        ("opentelemetry" Hs.:| ["proto", "logs", "v1", "ResourceLogs"])
                    )
                )
            )
        )
        (HsProtobufAST.Single "resource_logs")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportLogsServiceRequest) where
  toJSONPB (ExportLogsServiceRequest f1) =
    HsJSONPB.object
      [ "resource_logs"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
               )
                f1
             )
      ]
  toEncodingPB (ExportLogsServiceRequest f1) =
    HsJSONPB.pairs
      [ "resource_logs"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB ExportLogsServiceRequest) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportLogsServiceRequest"
      ( \obj ->
          Hs.pure ExportLogsServiceRequest
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                      @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                  )
                    (obj .: "resource_logs")
                )
      )
instance (HsJSONPB.ToJSON ExportLogsServiceRequest) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportLogsServiceRequest) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportLogsServiceRequest) where
  declareNamedSchema _ =
    do
      let declare_resource_logs = HsJSONPB.declareSchemaRef
      exportLogsServiceRequestResourceLogs <-
        declare_resource_logs
          Proxy.Proxy
      let _ =
            Hs.pure ExportLogsServiceRequest
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                        @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                    )
                      (HsJSONPB.asProxy declare_resource_logs)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ExportLogsServiceRequest"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "resource_logs"
                        , exportLogsServiceRequestResourceLogs
                        )
                      ]
                }
          }
newtype ExportLogsServiceResponse = ExportLogsServiceResponse {exportLogsServiceResponsePartialSuccess :: (Hs.Maybe Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportLogsServiceResponse)
instance (HsProtobuf.Named ExportLogsServiceResponse) where
  nameOf _ = Hs.fromString "ExportLogsServiceResponse"
instance (HsProtobuf.HasDefault ExportLogsServiceResponse)
instance (HsProtobuf.Message ExportLogsServiceResponse) where
  encodeMessage
    _
    ExportLogsServiceResponse{exportLogsServiceResponsePartialSuccess} =
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 1)
          ( ( Hs.coerce
                @(Hs.Maybe Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
            )
              exportLogsServiceResponsePartialSuccess
          )
      )
  decodeMessage _ =
    Hs.pure ExportLogsServiceResponse
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                @(Hs.Maybe Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                (HsProtobufAST.Single "ExportLogsPartialSuccess")
            )
        )
        (HsProtobufAST.Single "partial_success")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportLogsServiceResponse) where
  toJSONPB (ExportLogsServiceResponse f1) =
    HsJSONPB.object
      [ "partial_success"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
               )
                f1
             )
      ]
  toEncodingPB (ExportLogsServiceResponse f1) =
    HsJSONPB.pairs
      [ "partial_success"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB ExportLogsServiceResponse) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportLogsServiceResponse"
      ( \obj ->
          Hs.pure ExportLogsServiceResponse
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                      @(Hs.Maybe Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                  )
                    (obj .: "partial_success")
                )
      )
instance (HsJSONPB.ToJSON ExportLogsServiceResponse) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportLogsServiceResponse) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportLogsServiceResponse) where
  declareNamedSchema _ =
    do
      let declare_partial_success = HsJSONPB.declareSchemaRef
      exportLogsServiceResponsePartialSuccess <-
        declare_partial_success
          Proxy.Proxy
      let _ =
            Hs.pure ExportLogsServiceResponse
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                        @(Hs.Maybe Opentelemetry.Proto.Collector.Logs.V1.LogsService.ExportLogsPartialSuccess)
                    )
                      (HsJSONPB.asProxy declare_partial_success)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ExportLogsServiceResponse"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "partial_success"
                        , exportLogsServiceResponsePartialSuccess
                        )
                      ]
                }
          }
data ExportLogsPartialSuccess = ExportLogsPartialSuccess
  { exportLogsPartialSuccessRejectedLogRecords :: Hs.Int64
  , exportLogsPartialSuccessErrorMessage :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportLogsPartialSuccess)
instance (HsProtobuf.Named ExportLogsPartialSuccess) where
  nameOf _ = Hs.fromString "ExportLogsPartialSuccess"
instance (HsProtobuf.HasDefault ExportLogsPartialSuccess)
instance (HsProtobuf.Message ExportLogsPartialSuccess) where
  encodeMessage
    _
    ExportLogsPartialSuccess
      { exportLogsPartialSuccessRejectedLogRecords
      , exportLogsPartialSuccessErrorMessage
      } =
      Hs.mappend
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 1)
            exportLogsPartialSuccessRejectedLogRecords
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 2)
            ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                exportLogsPartialSuccessErrorMessage
            )
        )
  decodeMessage _ =
    Hs.pure ExportLogsPartialSuccess
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.Int64)
        (HsProtobufAST.Single "rejected_log_records")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "error_message")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportLogsPartialSuccess) where
  toJSONPB (ExportLogsPartialSuccess f1 f2) =
    HsJSONPB.object
      [ "rejected_log_records" .= f1
      , "error_message"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
  toEncodingPB (ExportLogsPartialSuccess f1 f2) =
    HsJSONPB.pairs
      [ "rejected_log_records" .= f1
      , "error_message"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
instance (HsJSONPB.FromJSONPB ExportLogsPartialSuccess) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportLogsPartialSuccess"
      ( \obj ->
          Hs.pure ExportLogsPartialSuccess
            <*> obj .: "rejected_log_records"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "error_message")
                )
      )
instance (HsJSONPB.ToJSON ExportLogsPartialSuccess) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportLogsPartialSuccess) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportLogsPartialSuccess) where
  declareNamedSchema _ =
    do
      let declare_rejected_log_records = HsJSONPB.declareSchemaRef
      exportLogsPartialSuccessRejectedLogRecords <-
        declare_rejected_log_records
          Proxy.Proxy
      let declare_error_message = HsJSONPB.declareSchemaRef
      exportLogsPartialSuccessErrorMessage <-
        declare_error_message
          Proxy.Proxy
      let _ =
            Hs.pure ExportLogsPartialSuccess
              <*> HsJSONPB.asProxy declare_rejected_log_records
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_error_message)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ExportLogsPartialSuccess"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "rejected_log_records"
                        , exportLogsPartialSuccessRejectedLogRecords
                        )
                      ,
                        ( "error_message"
                        , exportLogsPartialSuccessErrorMessage
                        )
                      ]
                }
          }
