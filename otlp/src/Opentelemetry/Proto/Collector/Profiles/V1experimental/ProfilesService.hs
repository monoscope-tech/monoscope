{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService where

import Control.Applicative ((<$>), (<*>), (<|>))
import Control.Applicative qualified as Hs
import Control.DeepSeq qualified as Hs
import Control.Monad qualified as Hs
import Data.ByteString qualified as Hs
import Data.Coerce qualified as Hs
import Data.Int qualified as Hs (Int16, Int32, Int64)
import Data.List.NonEmpty qualified as Hs (NonEmpty (..))
import Data.Map qualified as Hs (Map, mapKeysMonotonic)
import Data.Proxy qualified as Proxy
import Data.String qualified as Hs (fromString)
import Data.Text.Lazy qualified as Hs (Text)
import Data.Vector qualified as Hs (Vector)
import Data.Word qualified as Hs (Word16, Word32, Word64)
import GHC.Enum qualified as Hs
import GHC.Generics qualified as Hs
import Google.Protobuf.Wrappers.Polymorphic qualified as HsProtobuf (
  Wrapped (..),
 )
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (
  serverLoop,
 )
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC (
  serverLoop,
 )
import Opentelemetry.Proto.Profiles.V1experimental.Profiles qualified
import Proto3.Suite.Class qualified as HsProtobuf
import Proto3.Suite.DotProto qualified as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import Proto3.Suite.JSONPB qualified as HsJSONPB
import Proto3.Suite.Types qualified as HsProtobuf
import Proto3.Wire qualified as HsProtobuf
import Proto3.Wire.Decode qualified as HsProtobuf (
  Parser,
  RawField,
 )
import Unsafe.Coerce qualified as Hs
import Prelude qualified as Hs


newtype ProfilesService request response = ProfilesService
  { profilesServiceExport
      :: ( (request 'HsGRPC.Normal Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesServiceRequest Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesServiceResponse)
           -> (Hs.IO (response 'HsGRPC.Normal Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesServiceResponse))
         )
  }
  deriving (Hs.Generic)
profilesServiceServer
  :: (ProfilesService HsGRPC.ServerRequest HsGRPC.ServerResponse)
  -> HsGRPC.ServiceOptions
  -> Hs.IO ()
profilesServiceServer
  ProfilesService{profilesServiceExport}
  ( ServiceOptions
      serverHost
      serverPort
      useCompression
      userAgentPrefix
      userAgentSuffix
      initialMetadata
      sslConfig
      logger
      serverMaxReceiveMessageLength
      serverMaxMetadataSize
    ) =
    HsGRPC.serverLoop
      HsGRPC.defaultOptions
        { HsGRPC.optNormalHandlers =
            [ HsGRPC.UnaryHandler
                ( HsGRPC.MethodName
                    "/opentelemetry.proto.collector.profiles.v1experimental.ProfilesService/Export"
                )
                ( HsGRPC.convertGeneratedServerHandler
                    profilesServiceExport
                )
            ]
        , HsGRPC.optClientStreamHandlers = []
        , HsGRPC.optServerStreamHandlers = []
        , HsGRPC.optBiDiStreamHandlers = []
        , optServerHost = serverHost
        , optServerPort = serverPort
        , optUseCompression = useCompression
        , optUserAgentPrefix = userAgentPrefix
        , optUserAgentSuffix = userAgentSuffix
        , optInitialMetadata = initialMetadata
        , optSSLConfig = sslConfig
        , optLogger = logger
        , optMaxReceiveMessageLength = serverMaxReceiveMessageLength
        , optMaxMetadataSize = serverMaxMetadataSize
        }
profilesServiceClient
  :: HsGRPC.Client
  -> Hs.IO (ProfilesService HsGRPC.ClientRequest HsGRPC.ClientResult)
profilesServiceClient client =
  Hs.pure ProfilesService
    <*> ( Hs.pure (HsGRPC.clientRequest client)
            <*> HsGRPC.clientRegisterMethod
              client
              ( HsGRPC.MethodName
                  "/opentelemetry.proto.collector.profiles.v1experimental.ProfilesService/Export"
              )
        )
newtype ExportProfilesServiceRequest = ExportProfilesServiceRequest {exportProfilesServiceRequestResourceProfiles :: (Hs.Vector Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportProfilesServiceRequest)
instance (HsProtobuf.Named ExportProfilesServiceRequest) where
  nameOf _ = Hs.fromString "ExportProfilesServiceRequest"
instance (HsProtobuf.HasDefault ExportProfilesServiceRequest)
instance (HsProtobuf.Message ExportProfilesServiceRequest) where
  encodeMessage
    _
    ExportProfilesServiceRequest{exportProfilesServiceRequestResourceProfiles} =
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 1)
          ( ( Hs.coerce
                @(Hs.Vector Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
            )
              exportProfilesServiceRequestResourceProfiles
          )
      )
  decodeMessage _ =
    Hs.pure ExportProfilesServiceRequest
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                @(Hs.Vector Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    ( HsProtobufAST.Path
                        ( "opentelemetry"
                            Hs.:| ["proto", "profiles", "v1experimental", "ResourceProfiles"]
                        )
                    )
                )
            )
        )
        (HsProtobufAST.Single "resource_profiles")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportProfilesServiceRequest) where
  toJSONPB (ExportProfilesServiceRequest f1) =
    HsJSONPB.object
      [ "resource_profiles"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
               )
                f1
             )
      ]
  toEncodingPB (ExportProfilesServiceRequest f1) =
    HsJSONPB.pairs
      [ "resource_profiles"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB ExportProfilesServiceRequest) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportProfilesServiceRequest"
      ( \obj ->
          Hs.pure ExportProfilesServiceRequest
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                      @(Hs.Vector Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                  )
                    (obj .: "resource_profiles")
                )
      )
instance (HsJSONPB.ToJSON ExportProfilesServiceRequest) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportProfilesServiceRequest) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportProfilesServiceRequest) where
  declareNamedSchema _ =
    do
      let declare_resource_profiles = HsJSONPB.declareSchemaRef
      exportProfilesServiceRequestResourceProfiles <-
        declare_resource_profiles
          Proxy.Proxy
      let _ =
            Hs.pure ExportProfilesServiceRequest
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                        @(Hs.Vector Opentelemetry.Proto.Profiles.V1experimental.Profiles.ResourceProfiles)
                    )
                      (HsJSONPB.asProxy declare_resource_profiles)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName =
              Hs.Just
                "ExportProfilesServiceRequest"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "resource_profiles"
                        , exportProfilesServiceRequestResourceProfiles
                        )
                      ]
                }
          }
newtype ExportProfilesServiceResponse = ExportProfilesServiceResponse {exportProfilesServiceResponsePartialSuccess :: (Hs.Maybe Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportProfilesServiceResponse)
instance (HsProtobuf.Named ExportProfilesServiceResponse) where
  nameOf _ = Hs.fromString "ExportProfilesServiceResponse"
instance (HsProtobuf.HasDefault ExportProfilesServiceResponse)
instance (HsProtobuf.Message ExportProfilesServiceResponse) where
  encodeMessage
    _
    ExportProfilesServiceResponse{exportProfilesServiceResponsePartialSuccess} =
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 1)
          ( ( Hs.coerce
                @(Hs.Maybe Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
            )
              exportProfilesServiceResponsePartialSuccess
          )
      )
  decodeMessage _ =
    Hs.pure ExportProfilesServiceResponse
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                @(Hs.Maybe Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                (HsProtobufAST.Single "ExportProfilesPartialSuccess")
            )
        )
        (HsProtobufAST.Single "partial_success")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportProfilesServiceResponse) where
  toJSONPB (ExportProfilesServiceResponse f1) =
    HsJSONPB.object
      [ "partial_success"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
               )
                f1
             )
      ]
  toEncodingPB (ExportProfilesServiceResponse f1) =
    HsJSONPB.pairs
      [ "partial_success"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB ExportProfilesServiceResponse) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportProfilesServiceResponse"
      ( \obj ->
          Hs.pure ExportProfilesServiceResponse
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                      @(Hs.Maybe Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                  )
                    (obj .: "partial_success")
                )
      )
instance (HsJSONPB.ToJSON ExportProfilesServiceResponse) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportProfilesServiceResponse) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportProfilesServiceResponse) where
  declareNamedSchema _ =
    do
      let declare_partial_success = HsJSONPB.declareSchemaRef
      exportProfilesServiceResponsePartialSuccess <-
        declare_partial_success
          Proxy.Proxy
      let _ =
            Hs.pure ExportProfilesServiceResponse
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                        @(Hs.Maybe Opentelemetry.Proto.Collector.Profiles.V1experimental.ProfilesService.ExportProfilesPartialSuccess)
                    )
                      (HsJSONPB.asProxy declare_partial_success)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName =
              Hs.Just
                "ExportProfilesServiceResponse"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "partial_success"
                        , exportProfilesServiceResponsePartialSuccess
                        )
                      ]
                }
          }
data ExportProfilesPartialSuccess = ExportProfilesPartialSuccess
  { exportProfilesPartialSuccessRejectedProfiles :: Hs.Int64
  , exportProfilesPartialSuccessErrorMessage :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportProfilesPartialSuccess)
instance (HsProtobuf.Named ExportProfilesPartialSuccess) where
  nameOf _ = Hs.fromString "ExportProfilesPartialSuccess"
instance (HsProtobuf.HasDefault ExportProfilesPartialSuccess)
instance (HsProtobuf.Message ExportProfilesPartialSuccess) where
  encodeMessage
    _
    ExportProfilesPartialSuccess
      { exportProfilesPartialSuccessRejectedProfiles
      , exportProfilesPartialSuccessErrorMessage
      } =
      Hs.mappend
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 1)
            exportProfilesPartialSuccessRejectedProfiles
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 2)
            ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                exportProfilesPartialSuccessErrorMessage
            )
        )
  decodeMessage _ =
    Hs.pure ExportProfilesPartialSuccess
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.Int64)
        (HsProtobufAST.Single "rejected_profiles")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "error_message")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportProfilesPartialSuccess) where
  toJSONPB (ExportProfilesPartialSuccess f1 f2) =
    HsJSONPB.object
      [ "rejected_profiles" .= f1
      , "error_message"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
  toEncodingPB (ExportProfilesPartialSuccess f1 f2) =
    HsJSONPB.pairs
      [ "rejected_profiles" .= f1
      , "error_message"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
instance (HsJSONPB.FromJSONPB ExportProfilesPartialSuccess) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportProfilesPartialSuccess"
      ( \obj ->
          Hs.pure ExportProfilesPartialSuccess
            <*> obj .: "rejected_profiles"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "error_message")
                )
      )
instance (HsJSONPB.ToJSON ExportProfilesPartialSuccess) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportProfilesPartialSuccess) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportProfilesPartialSuccess) where
  declareNamedSchema _ =
    do
      let declare_rejected_profiles = HsJSONPB.declareSchemaRef
      exportProfilesPartialSuccessRejectedProfiles <-
        declare_rejected_profiles
          Proxy.Proxy
      let declare_error_message = HsJSONPB.declareSchemaRef
      exportProfilesPartialSuccessErrorMessage <-
        declare_error_message
          Proxy.Proxy
      let _ =
            Hs.pure ExportProfilesPartialSuccess
              <*> HsJSONPB.asProxy declare_rejected_profiles
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_error_message)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName =
              Hs.Just
                "ExportProfilesPartialSuccess"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "rejected_profiles"
                        , exportProfilesPartialSuccessRejectedProfiles
                        )
                      ,
                        ( "error_message"
                        , exportProfilesPartialSuccessErrorMessage
                        )
                      ]
                }
          }
