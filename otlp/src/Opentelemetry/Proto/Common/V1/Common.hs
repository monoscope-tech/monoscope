{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Opentelemetry.Proto.Common.V1.Common where

import Control.Applicative ((<$>), (<*>), (<|>))
import Control.Applicative qualified as Hs
import Control.DeepSeq qualified as Hs
import Control.Monad qualified as Hs
import Data.ByteString qualified as Hs
import Data.Coerce qualified as Hs
import Data.Int qualified as Hs (Int16, Int32, Int64)
import Data.List.NonEmpty qualified as Hs (NonEmpty (..))
import Data.Map qualified as Hs (Map, mapKeysMonotonic)
import Data.Proxy qualified as Proxy
import Data.String qualified as Hs (fromString)
import Data.Text.Lazy qualified as Hs (Text)
import Data.Vector qualified as Hs (Vector)
import Data.Word qualified as Hs (Word16, Word32, Word64)
import GHC.Enum qualified as Hs
import GHC.Generics qualified as Hs
import Google.Protobuf.Wrappers.Polymorphic qualified as HsProtobuf (
  Wrapped (..),
 )
import Proto3.Suite.Class qualified as HsProtobuf
import Proto3.Suite.DotProto qualified as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import Proto3.Suite.JSONPB qualified as HsJSONPB
import Proto3.Suite.Types qualified as HsProtobuf
import Proto3.Wire qualified as HsProtobuf
import Proto3.Wire.Decode qualified as HsProtobuf (
  Parser,
  RawField,
 )
import Unsafe.Coerce qualified as Hs
import Prelude qualified as Hs


newtype AnyValue = AnyValue {anyValueValue :: (Hs.Maybe AnyValueValue)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData AnyValue)
instance (HsProtobuf.Named AnyValue) where
  nameOf _ = Hs.fromString "AnyValue"
instance (HsProtobuf.HasDefault AnyValue)
instance (HsProtobuf.Message AnyValue) where
  encodeMessage _ AnyValue{anyValueValue} =
    ( case anyValueValue of
        Hs.Nothing -> Hs.mempty
        Hs.Just x ->
          case x of
            AnyValueValueStringValue y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( HsProtobuf.ForceEmit
                    ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) y)
                )
            AnyValueValueBoolValue y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                (HsProtobuf.ForceEmit y)
            AnyValueValueIntValue y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                (HsProtobuf.ForceEmit y)
            AnyValueValueDoubleValue y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                (HsProtobuf.ForceEmit y)
            AnyValueValueArrayValue y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ( ( Hs.coerce
                      @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.ArrayValue)
                      @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.ArrayValue)
                  )
                    (Hs.Just y)
                )
            AnyValueValueKvlistValue y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 6)
                ( ( Hs.coerce
                      @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.KeyValueList)
                      @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.KeyValueList)
                  )
                    (Hs.Just y)
                )
            AnyValueValueBytesValue y ->
              HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 7)
                ( HsProtobuf.ForceEmit
                    ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) y)
                )
    )
  decodeMessage _ =
    Hs.pure AnyValue
      <*> HsProtobuf.oneof
        Hs.Nothing
        [
          ( (HsProtobuf.FieldNumber 1)
          , Hs.pure (Hs.Just Hs.. AnyValueValueStringValue)
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 2)
          , Hs.pure (Hs.Just Hs.. AnyValueValueBoolValue)
              <*> HsProtobuf.decodeMessageField
          )
        ,
          ( (HsProtobuf.FieldNumber 3)
          , Hs.pure (Hs.Just Hs.. AnyValueValueIntValue)
              <*> HsProtobuf.decodeMessageField
          )
        ,
          ( (HsProtobuf.FieldNumber 4)
          , Hs.pure (Hs.Just Hs.. AnyValueValueDoubleValue)
              <*> HsProtobuf.decodeMessageField
          )
        ,
          ( (HsProtobuf.FieldNumber 5)
          , Hs.pure (Hs.fmap AnyValueValueArrayValue)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.ArrayValue)
                        @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.ArrayValue)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 6)
          , Hs.pure (Hs.fmap AnyValueValueKvlistValue)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.KeyValueList)
                        @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.KeyValueList)
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ,
          ( (HsProtobuf.FieldNumber 7)
          , Hs.pure (Hs.Just Hs.. AnyValueValueBytesValue)
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      HsProtobuf.decodeMessageField
                  )
          )
        ]
  dotProto _ = []
instance (HsJSONPB.ToJSONPB AnyValue) where
  toJSONPB (AnyValue f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7) =
    HsJSONPB.object
      [ ( let
            encodeValue =
              ( case f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7 of
                  Hs.Just (AnyValueValueStringValue f1) ->
                    HsJSONPB.pair
                      "string_value"
                      ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
                  Hs.Just (AnyValueValueBoolValue f2) ->
                    HsJSONPB.pair "bool_value" f2
                  Hs.Just (AnyValueValueIntValue f3) -> HsJSONPB.pair "int_value" f3
                  Hs.Just (AnyValueValueDoubleValue f4) ->
                    HsJSONPB.pair "double_value" f4
                  Hs.Just (AnyValueValueArrayValue f5) ->
                    HsJSONPB.pair "array_value" f5
                  Hs.Just (AnyValueValueKvlistValue f6) ->
                    HsJSONPB.pair "kvlist_value" f6
                  Hs.Just (AnyValueValueBytesValue f7) ->
                    HsJSONPB.pair
                      "bytes_value"
                      ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f7)
                  Hs.Nothing -> Hs.mempty
              )
           in
            ( \options ->
                if HsJSONPB.optEmitNamedOneof options
                  then ("value" .= HsJSONPB.objectOrNull [encodeValue] options) options
                  else encodeValue options
            )
        )
      ]
  toEncodingPB (AnyValue f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7) =
    HsJSONPB.pairs
      [ ( let
            encodeValue =
              ( case f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7 of
                  Hs.Just (AnyValueValueStringValue f1) ->
                    HsJSONPB.pair
                      "string_value"
                      ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
                  Hs.Just (AnyValueValueBoolValue f2) ->
                    HsJSONPB.pair "bool_value" f2
                  Hs.Just (AnyValueValueIntValue f3) -> HsJSONPB.pair "int_value" f3
                  Hs.Just (AnyValueValueDoubleValue f4) ->
                    HsJSONPB.pair "double_value" f4
                  Hs.Just (AnyValueValueArrayValue f5) ->
                    HsJSONPB.pair "array_value" f5
                  Hs.Just (AnyValueValueKvlistValue f6) ->
                    HsJSONPB.pair "kvlist_value" f6
                  Hs.Just (AnyValueValueBytesValue f7) ->
                    HsJSONPB.pair
                      "bytes_value"
                      ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f7)
                  Hs.Nothing -> Hs.mempty
              )
           in
            ( \options ->
                if HsJSONPB.optEmitNamedOneof options
                  then ("value" .= HsJSONPB.pairsOrNull [encodeValue] options) options
                  else encodeValue options
            )
        )
      ]
instance (HsJSONPB.FromJSONPB AnyValue) where
  parseJSONPB =
    HsJSONPB.withObject
      "AnyValue"
      ( \obj ->
          Hs.pure AnyValue
            <*> ( let
                    parseValue parseObj =
                      Hs.msum
                        [ Hs.Just
                            Hs.. AnyValueValueStringValue
                            Hs.. (Hs.coerce @(HsProtobuf.String Hs.Text) @Hs.Text)
                            <$> HsJSONPB.parseField parseObj "string_value"
                        , Hs.Just Hs.. AnyValueValueBoolValue
                            <$> HsJSONPB.parseField parseObj "bool_value"
                        , Hs.Just Hs.. AnyValueValueIntValue
                            <$> HsJSONPB.parseField parseObj "int_value"
                        , Hs.Just Hs.. AnyValueValueDoubleValue
                            <$> HsJSONPB.parseField parseObj "double_value"
                        , Hs.Just Hs.. AnyValueValueArrayValue
                            <$> HsJSONPB.parseField parseObj "array_value"
                        , Hs.Just Hs.. AnyValueValueKvlistValue
                            <$> HsJSONPB.parseField parseObj "kvlist_value"
                        , Hs.Just
                            Hs.. AnyValueValueBytesValue
                            Hs.. (Hs.coerce @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
                            <$> HsJSONPB.parseField parseObj "bytes_value"
                        , Hs.pure Hs.Nothing
                        ]
                   in
                    (obj .: "value" Hs.>>= HsJSONPB.withObject "value" parseValue)
                      <|> (parseValue obj)
                )
      )
instance (HsJSONPB.ToJSON AnyValue) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON AnyValue) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema AnyValue) where
  declareNamedSchema _ =
    do
      let declare_value = HsJSONPB.declareSchemaRef
      anyValueValue <- declare_value Proxy.Proxy
      let _ = Hs.pure AnyValue <*> HsJSONPB.asProxy declare_value
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "AnyValue"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "value"
                        , anyValueValue
                        )
                      ]
                }
          }
data AnyValueValue
  = AnyValueValueStringValue Hs.Text
  | AnyValueValueBoolValue Hs.Bool
  | AnyValueValueIntValue Hs.Int64
  | AnyValueValueDoubleValue Hs.Double
  | AnyValueValueArrayValue Opentelemetry.Proto.Common.V1.Common.ArrayValue
  | AnyValueValueKvlistValue Opentelemetry.Proto.Common.V1.Common.KeyValueList
  | AnyValueValueBytesValue Hs.ByteString
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData AnyValueValue)
instance (HsProtobuf.Named AnyValueValue) where
  nameOf _ = Hs.fromString "AnyValueValue"
instance (HsJSONPB.ToSchema AnyValueValue) where
  declareNamedSchema _ =
    do
      let declare_string_value = HsJSONPB.declareSchemaRef
      anyValueValueStringValue <- declare_string_value Proxy.Proxy
      let _ =
            Hs.pure AnyValueValueStringValue
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_string_value)
                  )
      let declare_bool_value = HsJSONPB.declareSchemaRef
      anyValueValueBoolValue <- declare_bool_value Proxy.Proxy
      let _ =
            Hs.pure AnyValueValueBoolValue
              <*> HsJSONPB.asProxy declare_bool_value
      let declare_int_value = HsJSONPB.declareSchemaRef
      anyValueValueIntValue <- declare_int_value Proxy.Proxy
      let _ =
            Hs.pure AnyValueValueIntValue
              <*> HsJSONPB.asProxy declare_int_value
      let declare_double_value = HsJSONPB.declareSchemaRef
      anyValueValueDoubleValue <- declare_double_value Proxy.Proxy
      let _ =
            Hs.pure AnyValueValueDoubleValue
              <*> HsJSONPB.asProxy declare_double_value
      let declare_array_value = HsJSONPB.declareSchemaRef
      anyValueValueArrayValue <- declare_array_value Proxy.Proxy
      let _ =
            Hs.pure AnyValueValueArrayValue
              <*> HsJSONPB.asProxy declare_array_value
      let declare_kvlist_value = HsJSONPB.declareSchemaRef
      anyValueValueKvlistValue <- declare_kvlist_value Proxy.Proxy
      let _ =
            Hs.pure AnyValueValueKvlistValue
              <*> HsJSONPB.asProxy declare_kvlist_value
      let declare_bytes_value = HsJSONPB.declareSchemaRef
      anyValueValueBytesValue <- declare_bytes_value Proxy.Proxy
      let _ =
            Hs.pure AnyValueValueBytesValue
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_bytes_value)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "AnyValueValue"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "string_value"
                        , anyValueValueStringValue
                        )
                      ,
                        ( "bool_value"
                        , anyValueValueBoolValue
                        )
                      ,
                        ( "int_value"
                        , anyValueValueIntValue
                        )
                      ,
                        ( "double_value"
                        , anyValueValueDoubleValue
                        )
                      ,
                        ( "array_value"
                        , anyValueValueArrayValue
                        )
                      ,
                        ( "kvlist_value"
                        , anyValueValueKvlistValue
                        )
                      ,
                        ( "bytes_value"
                        , anyValueValueBytesValue
                        )
                      ]
                , HsJSONPB._schemaMinProperties = Hs.Just 1
                , HsJSONPB._schemaMaxProperties = Hs.Just 1
                }
          }
newtype ArrayValue = ArrayValue {arrayValueValues :: (Hs.Vector Opentelemetry.Proto.Common.V1.Common.AnyValue)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ArrayValue)
instance (HsProtobuf.Named ArrayValue) where
  nameOf _ = Hs.fromString "ArrayValue"
instance (HsProtobuf.HasDefault ArrayValue)
instance (HsProtobuf.Message ArrayValue) where
  encodeMessage _ ArrayValue{arrayValueValues} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.AnyValue)
              @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.AnyValue)
          )
            arrayValueValues
        )
    )
  decodeMessage _ =
    Hs.pure ArrayValue
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.AnyValue)
                @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.AnyValue)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "AnyValue"))
        )
        (HsProtobufAST.Single "values")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ArrayValue) where
  toJSONPB (ArrayValue f1) =
    HsJSONPB.object
      [ "values"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.AnyValue)
               )
                f1
             )
      ]
  toEncodingPB (ArrayValue f1) =
    HsJSONPB.pairs
      [ "values"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.AnyValue)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB ArrayValue) where
  parseJSONPB =
    HsJSONPB.withObject
      "ArrayValue"
      ( \obj ->
          Hs.pure ArrayValue
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.AnyValue)
                      @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  )
                    (obj .: "values")
                )
      )
instance (HsJSONPB.ToJSON ArrayValue) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ArrayValue) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ArrayValue) where
  declareNamedSchema _ =
    do
      let declare_values = HsJSONPB.declareSchemaRef
      arrayValueValues <- declare_values Proxy.Proxy
      let _ =
            Hs.pure ArrayValue
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.AnyValue)
                        @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.AnyValue)
                    )
                      (HsJSONPB.asProxy declare_values)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ArrayValue"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "values"
                        , arrayValueValues
                        )
                      ]
                }
          }
newtype KeyValueList = KeyValueList {keyValueListValues :: (Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData KeyValueList)
instance (HsProtobuf.Named KeyValueList) where
  nameOf _ = Hs.fromString "KeyValueList"
instance (HsProtobuf.HasDefault KeyValueList)
instance (HsProtobuf.Message KeyValueList) where
  encodeMessage _ KeyValueList{keyValueListValues} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
              @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
          )
            keyValueListValues
        )
    )
  decodeMessage _ =
    Hs.pure KeyValueList
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "KeyValue"))
        )
        (HsProtobufAST.Single "values")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB KeyValueList) where
  toJSONPB (KeyValueList f1) =
    HsJSONPB.object
      [ "values"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
               )
                f1
             )
      ]
  toEncodingPB (KeyValueList f1) =
    HsJSONPB.pairs
      [ "values"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB KeyValueList) where
  parseJSONPB =
    HsJSONPB.withObject
      "KeyValueList"
      ( \obj ->
          Hs.pure KeyValueList
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                      @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  )
                    (obj .: "values")
                )
      )
instance (HsJSONPB.ToJSON KeyValueList) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON KeyValueList) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema KeyValueList) where
  declareNamedSchema _ =
    do
      let declare_values = HsJSONPB.declareSchemaRef
      keyValueListValues <- declare_values Proxy.Proxy
      let _ =
            Hs.pure KeyValueList
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                        @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                    )
                      (HsJSONPB.asProxy declare_values)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "KeyValueList"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "values"
                        , keyValueListValues
                        )
                      ]
                }
          }
data KeyValue = KeyValue
  { keyValueKey :: Hs.Text
  , keyValueValue :: (Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData KeyValue)
instance (HsProtobuf.Named KeyValue) where
  nameOf _ = Hs.fromString "KeyValue"
instance (HsProtobuf.HasDefault KeyValue)
instance (HsProtobuf.Message KeyValue) where
  encodeMessage _ KeyValue{keyValueKey, keyValueValue} =
    Hs.mappend
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 1)
          ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) keyValueKey)
      )
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 2)
          ( ( Hs.coerce
                @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
            )
              keyValueValue
          )
      )
  decodeMessage _ =
    Hs.pure KeyValue
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
                @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "key")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Prim
            (HsProtobufAST.Named (HsProtobufAST.Single "AnyValue"))
        )
        (HsProtobufAST.Single "value")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB KeyValue) where
  toJSONPB (KeyValue f1 f2) =
    HsJSONPB.object
      [ "key" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "value"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
               )
                f2
             )
      ]
  toEncodingPB (KeyValue f1 f2) =
    HsJSONPB.pairs
      [ "key" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "value"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
               )
                f2
             )
      ]
instance (HsJSONPB.FromJSONPB KeyValue) where
  parseJSONPB =
    HsJSONPB.withObject
      "KeyValue"
      ( \obj ->
          Hs.pure KeyValue
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "key")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
                      @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  )
                    (obj .: "value")
                )
      )
instance (HsJSONPB.ToJSON KeyValue) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON KeyValue) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema KeyValue) where
  declareNamedSchema _ =
    do
      let declare_key = HsJSONPB.declareSchemaRef
      keyValueKey <- declare_key Proxy.Proxy
      let declare_value = HsJSONPB.declareSchemaRef
      keyValueValue <- declare_value Proxy.Proxy
      let _ =
            Hs.pure KeyValue
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_key)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
                        @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                    )
                      (HsJSONPB.asProxy declare_value)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "KeyValue"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [ ("key", keyValueKey)
                      ,
                        ( "value"
                        , keyValueValue
                        )
                      ]
                }
          }
data InstrumentationScope = InstrumentationScope
  { instrumentationScopeName :: Hs.Text
  , instrumentationScopeVersion :: Hs.Text
  , instrumentationScopeAttributes :: (Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
  , instrumentationScopeDroppedAttributesCount :: Hs.Word32
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData InstrumentationScope)
instance (HsProtobuf.Named InstrumentationScope) where
  nameOf _ = Hs.fromString "InstrumentationScope"
instance (HsProtobuf.HasDefault InstrumentationScope)
instance (HsProtobuf.Message InstrumentationScope) where
  encodeMessage
    _
    InstrumentationScope
      { instrumentationScopeName
      , instrumentationScopeVersion
      , instrumentationScopeAttributes
      , instrumentationScopeDroppedAttributesCount
      } =
      Hs.mappend
        ( Hs.mappend
            ( Hs.mappend
                ( HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 1)
                    ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                        instrumentationScopeName
                    )
                )
                ( HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 2)
                    ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                        instrumentationScopeVersion
                    )
                )
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( ( Hs.coerce
                      @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  )
                    instrumentationScopeAttributes
                )
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 4)
            instrumentationScopeDroppedAttributesCount
        )
  decodeMessage _ =
    Hs.pure InstrumentationScope
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 4)
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "name")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "version")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "KeyValue"))
        )
        (HsProtobufAST.Single "attributes")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 4)
        (HsProtobufAST.Prim HsProtobufAST.UInt32)
        (HsProtobufAST.Single "dropped_attributes_count")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB InstrumentationScope) where
  toJSONPB (InstrumentationScope f1 f2 f3 f4) =
    HsJSONPB.object
      [ "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "version"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      , "attributes"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
               )
                f3
             )
      , "dropped_attributes_count" .= f4
      ]
  toEncodingPB (InstrumentationScope f1 f2 f3 f4) =
    HsJSONPB.pairs
      [ "name" .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f1)
      , "version"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      , "attributes"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
               )
                f3
             )
      , "dropped_attributes_count" .= f4
      ]
instance (HsJSONPB.FromJSONPB InstrumentationScope) where
  parseJSONPB =
    HsJSONPB.withObject
      "InstrumentationScope"
      ( \obj ->
          Hs.pure InstrumentationScope
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "name")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "version")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                      @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  )
                    (obj .: "attributes")
                )
            <*> obj .: "dropped_attributes_count"
      )
instance (HsJSONPB.ToJSON InstrumentationScope) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON InstrumentationScope) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema InstrumentationScope) where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      instrumentationScopeName <- declare_name Proxy.Proxy
      let declare_version = HsJSONPB.declareSchemaRef
      instrumentationScopeVersion <- declare_version Proxy.Proxy
      let declare_attributes = HsJSONPB.declareSchemaRef
      instrumentationScopeAttributes <- declare_attributes Proxy.Proxy
      let declare_dropped_attributes_count = HsJSONPB.declareSchemaRef
      instrumentationScopeDroppedAttributesCount <-
        declare_dropped_attributes_count
          Proxy.Proxy
      let _ =
            Hs.pure InstrumentationScope
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_name)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_version)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                        @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                    )
                      (HsJSONPB.asProxy declare_attributes)
                  )
              <*> HsJSONPB.asProxy declare_dropped_attributes_count
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "InstrumentationScope"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "name"
                        , instrumentationScopeName
                        )
                      ,
                        ( "version"
                        , instrumentationScopeVersion
                        )
                      ,
                        ( "attributes"
                        , instrumentationScopeAttributes
                        )
                      ,
                        ( "dropped_attributes_count"
                        , instrumentationScopeDroppedAttributesCount
                        )
                      ]
                }
          }
