{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Opentelemetry.Proto.Logs.V1.Logs where

import Control.Applicative ((<$>), (<*>), (<|>))
import Control.Applicative qualified as Hs
import Control.DeepSeq qualified as Hs
import Control.Monad qualified as Hs
import Data.ByteString qualified as Hs
import Data.Coerce qualified as Hs
import Data.Int qualified as Hs (Int16, Int32, Int64)
import Data.List.NonEmpty qualified as Hs (NonEmpty (..))
import Data.Map qualified as Hs (Map, mapKeysMonotonic)
import Data.Proxy qualified as Proxy
import Data.String qualified as Hs (fromString)
import Data.Text.Lazy qualified as Hs (Text)
import Data.Vector qualified as Hs (Vector)
import Data.Word qualified as Hs (Word16, Word32, Word64)
import GHC.Enum qualified as Hs
import GHC.Generics qualified as Hs
import Google.Protobuf.Wrappers.Polymorphic qualified as HsProtobuf (
  Wrapped (..),
 )
import Opentelemetry.Proto.Common.V1.Common qualified
import Opentelemetry.Proto.Resource.V1.Resource qualified
import Proto3.Suite.Class qualified as HsProtobuf
import Proto3.Suite.DotProto qualified as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import Proto3.Suite.JSONPB qualified as HsJSONPB
import Proto3.Suite.Types qualified as HsProtobuf
import Proto3.Wire qualified as HsProtobuf
import Proto3.Wire.Decode qualified as HsProtobuf (
  Parser,
  RawField,
 )
import Unsafe.Coerce qualified as Hs
import Prelude qualified as Hs


newtype LogsData = LogsData {logsDataResourceLogs :: (Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData LogsData)
instance (HsProtobuf.Named LogsData) where
  nameOf _ = Hs.fromString "LogsData"
instance (HsProtobuf.HasDefault LogsData)
instance (HsProtobuf.Message LogsData) where
  encodeMessage _ LogsData{logsDataResourceLogs} =
    ( HsProtobuf.encodeMessageField
        (HsProtobuf.FieldNumber 1)
        ( ( Hs.coerce
              @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
              @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
          )
            logsDataResourceLogs
        )
    )
  decodeMessage _ =
    Hs.pure LogsData
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "ResourceLogs"))
        )
        (HsProtobufAST.Single "resource_logs")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB LogsData) where
  toJSONPB (LogsData f1) =
    HsJSONPB.object
      [ "resource_logs"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
               )
                f1
             )
      ]
  toEncodingPB (LogsData f1) =
    HsJSONPB.pairs
      [ "resource_logs"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB LogsData) where
  parseJSONPB =
    HsJSONPB.withObject
      "LogsData"
      ( \obj ->
          Hs.pure LogsData
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                      @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                  )
                    (obj .: "resource_logs")
                )
      )
instance (HsJSONPB.ToJSON LogsData) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON LogsData) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema LogsData) where
  declareNamedSchema _ =
    do
      let declare_resource_logs = HsJSONPB.declareSchemaRef
      logsDataResourceLogs <- declare_resource_logs Proxy.Proxy
      let _ =
            Hs.pure LogsData
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                        @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ResourceLogs)
                    )
                      (HsJSONPB.asProxy declare_resource_logs)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "LogsData"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "resource_logs"
                        , logsDataResourceLogs
                        )
                      ]
                }
          }
data ResourceLogs = ResourceLogs
  { resourceLogsResource :: (Hs.Maybe Opentelemetry.Proto.Resource.V1.Resource.Resource)
  , resourceLogsScopeLogs :: (Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
  , resourceLogsSchemaUrl :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ResourceLogs)
instance (HsProtobuf.Named ResourceLogs) where
  nameOf _ = Hs.fromString "ResourceLogs"
instance (HsProtobuf.HasDefault ResourceLogs)
instance (HsProtobuf.Message ResourceLogs) where
  encodeMessage
    _
    ResourceLogs
      { resourceLogsResource
      , resourceLogsScopeLogs
      , resourceLogsSchemaUrl
      } =
      Hs.mappend
        ( Hs.mappend
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( ( Hs.coerce
                      @(Hs.Maybe Opentelemetry.Proto.Resource.V1.Resource.Resource)
                      @(HsProtobuf.Nested Opentelemetry.Proto.Resource.V1.Resource.Resource)
                  )
                    resourceLogsResource
                )
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( ( Hs.coerce
                      @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                  )
                    resourceLogsScopeLogs
                )
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 3)
            ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                resourceLogsSchemaUrl
            )
        )
  decodeMessage _ =
    Hs.pure ResourceLogs
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Opentelemetry.Proto.Resource.V1.Resource.Resource)
                @(Hs.Maybe Opentelemetry.Proto.Resource.V1.Resource.Resource)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    ( HsProtobufAST.Path
                        ("opentelemetry" Hs.:| ["proto", "resource", "v1", "Resource"])
                    )
                )
            )
        )
        (HsProtobufAST.Single "resource")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "ScopeLogs"))
        )
        (HsProtobufAST.Single "scope_logs")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "schema_url")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ResourceLogs) where
  toJSONPB (ResourceLogs f1 f2 f3) =
    HsJSONPB.object
      [ "resource"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Resource.V1.Resource.Resource)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Resource.V1.Resource.Resource)
               )
                f1
             )
      , "scope_logs"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
               )
                f2
             )
      , "schema_url"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
  toEncodingPB (ResourceLogs f1 f2 f3) =
    HsJSONPB.pairs
      [ "resource"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Resource.V1.Resource.Resource)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Resource.V1.Resource.Resource)
               )
                f1
             )
      , "scope_logs"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
               )
                f2
             )
      , "schema_url"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
instance (HsJSONPB.FromJSONPB ResourceLogs) where
  parseJSONPB =
    HsJSONPB.withObject
      "ResourceLogs"
      ( \obj ->
          Hs.pure ResourceLogs
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Resource.V1.Resource.Resource)
                      @(Hs.Maybe Opentelemetry.Proto.Resource.V1.Resource.Resource)
                  )
                    (obj .: "resource")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                      @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                  )
                    (obj .: "scope_logs")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "schema_url")
                )
      )
instance (HsJSONPB.ToJSON ResourceLogs) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ResourceLogs) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ResourceLogs) where
  declareNamedSchema _ =
    do
      let declare_resource = HsJSONPB.declareSchemaRef
      resourceLogsResource <- declare_resource Proxy.Proxy
      let declare_scope_logs = HsJSONPB.declareSchemaRef
      resourceLogsScopeLogs <- declare_scope_logs Proxy.Proxy
      let declare_schema_url = HsJSONPB.declareSchemaRef
      resourceLogsSchemaUrl <- declare_schema_url Proxy.Proxy
      let _ =
            Hs.pure ResourceLogs
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Resource.V1.Resource.Resource)
                        @(Hs.Maybe Opentelemetry.Proto.Resource.V1.Resource.Resource)
                    )
                      (HsJSONPB.asProxy declare_resource)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                        @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.ScopeLogs)
                    )
                      (HsJSONPB.asProxy declare_scope_logs)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_schema_url)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ResourceLogs"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "resource"
                        , resourceLogsResource
                        )
                      ,
                        ( "scope_logs"
                        , resourceLogsScopeLogs
                        )
                      ,
                        ( "schema_url"
                        , resourceLogsSchemaUrl
                        )
                      ]
                }
          }
data ScopeLogs = ScopeLogs
  { scopeLogsScope :: (Hs.Maybe Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
  , scopeLogsLogRecords :: (Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
  , scopeLogsSchemaUrl :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ScopeLogs)
instance (HsProtobuf.Named ScopeLogs) where
  nameOf _ = Hs.fromString "ScopeLogs"
instance (HsProtobuf.HasDefault ScopeLogs)
instance (HsProtobuf.Message ScopeLogs) where
  encodeMessage
    _
    ScopeLogs{scopeLogsScope, scopeLogsLogRecords, scopeLogsSchemaUrl} =
      Hs.mappend
        ( Hs.mappend
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( ( Hs.coerce
                      @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                      @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                  )
                    scopeLogsScope
                )
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( ( Hs.coerce
                      @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                  )
                    scopeLogsLogRecords
                )
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 3)
            ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                scopeLogsSchemaUrl
            )
        )
  decodeMessage _ =
    Hs.pure ScopeLogs
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    ( HsProtobufAST.Path
                        ( "opentelemetry"
                            Hs.:| ["proto", "common", "v1", "InstrumentationScope"]
                        )
                    )
                )
            )
        )
        (HsProtobufAST.Single "scope")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Repeated
            (HsProtobufAST.Named (HsProtobufAST.Single "LogRecord"))
        )
        (HsProtobufAST.Single "log_records")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "schema_url")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ScopeLogs) where
  toJSONPB (ScopeLogs f1 f2 f3) =
    HsJSONPB.object
      [ "scope"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
               )
                f1
             )
      , "log_records"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
               )
                f2
             )
      , "schema_url"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
  toEncodingPB (ScopeLogs f1 f2 f3) =
    HsJSONPB.pairs
      [ "scope"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
               )
                f1
             )
      , "log_records"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
               )
                f2
             )
      , "schema_url"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      ]
instance (HsJSONPB.FromJSONPB ScopeLogs) where
  parseJSONPB =
    HsJSONPB.withObject
      "ScopeLogs"
      ( \obj ->
          Hs.pure ScopeLogs
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                      @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                  )
                    (obj .: "scope")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                      @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                  )
                    (obj .: "log_records")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "schema_url")
                )
      )
instance (HsJSONPB.ToJSON ScopeLogs) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ScopeLogs) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ScopeLogs) where
  declareNamedSchema _ =
    do
      let declare_scope = HsJSONPB.declareSchemaRef
      scopeLogsScope <- declare_scope Proxy.Proxy
      let declare_log_records = HsJSONPB.declareSchemaRef
      scopeLogsLogRecords <- declare_log_records Proxy.Proxy
      let declare_schema_url = HsJSONPB.declareSchemaRef
      scopeLogsSchemaUrl <- declare_schema_url Proxy.Proxy
      let _ =
            Hs.pure ScopeLogs
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                        @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.InstrumentationScope)
                    )
                      (HsJSONPB.asProxy declare_scope)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                        @(Hs.Vector Opentelemetry.Proto.Logs.V1.Logs.LogRecord)
                    )
                      (HsJSONPB.asProxy declare_log_records)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_schema_url)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ScopeLogs"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "scope"
                        , scopeLogsScope
                        )
                      ,
                        ( "log_records"
                        , scopeLogsLogRecords
                        )
                      ,
                        ( "schema_url"
                        , scopeLogsSchemaUrl
                        )
                      ]
                }
          }
data SeverityNumber
  = SeverityNumberSEVERITY_NUMBER_UNSPECIFIED
  | SeverityNumberSEVERITY_NUMBER_TRACE
  | SeverityNumberSEVERITY_NUMBER_TRACE2
  | SeverityNumberSEVERITY_NUMBER_TRACE3
  | SeverityNumberSEVERITY_NUMBER_TRACE4
  | SeverityNumberSEVERITY_NUMBER_DEBUG
  | SeverityNumberSEVERITY_NUMBER_DEBUG2
  | SeverityNumberSEVERITY_NUMBER_DEBUG3
  | SeverityNumberSEVERITY_NUMBER_DEBUG4
  | SeverityNumberSEVERITY_NUMBER_INFO
  | SeverityNumberSEVERITY_NUMBER_INFO2
  | SeverityNumberSEVERITY_NUMBER_INFO3
  | SeverityNumberSEVERITY_NUMBER_INFO4
  | SeverityNumberSEVERITY_NUMBER_WARN
  | SeverityNumberSEVERITY_NUMBER_WARN2
  | SeverityNumberSEVERITY_NUMBER_WARN3
  | SeverityNumberSEVERITY_NUMBER_WARN4
  | SeverityNumberSEVERITY_NUMBER_ERROR
  | SeverityNumberSEVERITY_NUMBER_ERROR2
  | SeverityNumberSEVERITY_NUMBER_ERROR3
  | SeverityNumberSEVERITY_NUMBER_ERROR4
  | SeverityNumberSEVERITY_NUMBER_FATAL
  | SeverityNumberSEVERITY_NUMBER_FATAL2
  | SeverityNumberSEVERITY_NUMBER_FATAL3
  | SeverityNumberSEVERITY_NUMBER_FATAL4
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
instance (HsProtobuf.Named SeverityNumber) where
  nameOf _ = Hs.fromString "SeverityNumber"
instance (HsProtobuf.HasDefault SeverityNumber)
instance (Hs.Bounded SeverityNumber) where
  minBound = SeverityNumberSEVERITY_NUMBER_UNSPECIFIED
  maxBound = SeverityNumberSEVERITY_NUMBER_FATAL4
instance (Hs.Ord SeverityNumber) where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)
instance (HsProtobuf.ProtoEnum SeverityNumber) where
  toProtoEnumMay 0 =
    Hs.Just SeverityNumberSEVERITY_NUMBER_UNSPECIFIED
  toProtoEnumMay 1 = Hs.Just SeverityNumberSEVERITY_NUMBER_TRACE
  toProtoEnumMay 2 = Hs.Just SeverityNumberSEVERITY_NUMBER_TRACE2
  toProtoEnumMay 3 = Hs.Just SeverityNumberSEVERITY_NUMBER_TRACE3
  toProtoEnumMay 4 = Hs.Just SeverityNumberSEVERITY_NUMBER_TRACE4
  toProtoEnumMay 5 = Hs.Just SeverityNumberSEVERITY_NUMBER_DEBUG
  toProtoEnumMay 6 = Hs.Just SeverityNumberSEVERITY_NUMBER_DEBUG2
  toProtoEnumMay 7 = Hs.Just SeverityNumberSEVERITY_NUMBER_DEBUG3
  toProtoEnumMay 8 = Hs.Just SeverityNumberSEVERITY_NUMBER_DEBUG4
  toProtoEnumMay 9 = Hs.Just SeverityNumberSEVERITY_NUMBER_INFO
  toProtoEnumMay 10 = Hs.Just SeverityNumberSEVERITY_NUMBER_INFO2
  toProtoEnumMay 11 = Hs.Just SeverityNumberSEVERITY_NUMBER_INFO3
  toProtoEnumMay 12 = Hs.Just SeverityNumberSEVERITY_NUMBER_INFO4
  toProtoEnumMay 13 = Hs.Just SeverityNumberSEVERITY_NUMBER_WARN
  toProtoEnumMay 14 = Hs.Just SeverityNumberSEVERITY_NUMBER_WARN2
  toProtoEnumMay 15 = Hs.Just SeverityNumberSEVERITY_NUMBER_WARN3
  toProtoEnumMay 16 = Hs.Just SeverityNumberSEVERITY_NUMBER_WARN4
  toProtoEnumMay 17 = Hs.Just SeverityNumberSEVERITY_NUMBER_ERROR
  toProtoEnumMay 18 = Hs.Just SeverityNumberSEVERITY_NUMBER_ERROR2
  toProtoEnumMay 19 = Hs.Just SeverityNumberSEVERITY_NUMBER_ERROR3
  toProtoEnumMay 20 = Hs.Just SeverityNumberSEVERITY_NUMBER_ERROR4
  toProtoEnumMay 21 = Hs.Just SeverityNumberSEVERITY_NUMBER_FATAL
  toProtoEnumMay 22 = Hs.Just SeverityNumberSEVERITY_NUMBER_FATAL2
  toProtoEnumMay 23 = Hs.Just SeverityNumberSEVERITY_NUMBER_FATAL3
  toProtoEnumMay 24 = Hs.Just SeverityNumberSEVERITY_NUMBER_FATAL4
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_UNSPECIFIED = 0
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_TRACE = 1
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_TRACE2 = 2
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_TRACE3 = 3
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_TRACE4 = 4
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_DEBUG = 5
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_DEBUG2 = 6
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_DEBUG3 = 7
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_DEBUG4 = 8
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_INFO = 9
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_INFO2 = 10
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_INFO3 = 11
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_INFO4 = 12
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_WARN = 13
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_WARN2 = 14
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_WARN3 = 15
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_WARN4 = 16
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_ERROR = 17
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_ERROR2 = 18
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_ERROR3 = 19
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_ERROR4 = 20
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_FATAL = 21
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_FATAL2 = 22
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_FATAL3 = 23
  fromProtoEnum SeverityNumberSEVERITY_NUMBER_FATAL4 = 24
instance (HsJSONPB.ToJSONPB SeverityNumber) where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
instance (HsJSONPB.FromJSONPB SeverityNumber) where
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_UNSPECIFIED") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_UNSPECIFIED
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_TRACE") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_TRACE
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_TRACE2") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_TRACE2
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_TRACE3") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_TRACE3
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_TRACE4") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_TRACE4
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_DEBUG") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_DEBUG
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_DEBUG2") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_DEBUG2
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_DEBUG3") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_DEBUG3
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_DEBUG4") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_DEBUG4
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_INFO") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_INFO
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_INFO2") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_INFO2
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_INFO3") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_INFO3
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_INFO4") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_INFO4
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_WARN") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_WARN
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_WARN2") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_WARN2
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_WARN3") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_WARN3
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_WARN4") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_WARN4
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_ERROR") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_ERROR
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_ERROR2") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_ERROR2
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_ERROR3") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_ERROR3
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_ERROR4") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_ERROR4
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_FATAL") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_FATAL
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_FATAL2") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_FATAL2
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_FATAL3") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_FATAL3
  parseJSONPB (HsJSONPB.String "SEVERITY_NUMBER_FATAL4") =
    Hs.pure SeverityNumberSEVERITY_NUMBER_FATAL4
  parseJSONPB v = HsJSONPB.typeMismatch "SeverityNumber" v
instance (HsJSONPB.ToJSON SeverityNumber) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON SeverityNumber) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsProtobuf.Finite SeverityNumber)
data LogRecordFlags
  = LogRecordFlagsLOG_RECORD_FLAGS_DO_NOT_USE
  | LogRecordFlagsLOG_RECORD_FLAGS_TRACE_FLAGS_MASK
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
instance (HsProtobuf.Named LogRecordFlags) where
  nameOf _ = Hs.fromString "LogRecordFlags"
instance (HsProtobuf.HasDefault LogRecordFlags)
instance (Hs.Bounded LogRecordFlags) where
  minBound = LogRecordFlagsLOG_RECORD_FLAGS_DO_NOT_USE
  maxBound = LogRecordFlagsLOG_RECORD_FLAGS_TRACE_FLAGS_MASK
instance (Hs.Ord LogRecordFlags) where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)
instance (HsProtobuf.ProtoEnum LogRecordFlags) where
  toProtoEnumMay 0 =
    Hs.Just LogRecordFlagsLOG_RECORD_FLAGS_DO_NOT_USE
  toProtoEnumMay 255 =
    Hs.Just LogRecordFlagsLOG_RECORD_FLAGS_TRACE_FLAGS_MASK
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum LogRecordFlagsLOG_RECORD_FLAGS_DO_NOT_USE = 0
  fromProtoEnum LogRecordFlagsLOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 255
instance (HsJSONPB.ToJSONPB LogRecordFlags) where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
instance (HsJSONPB.FromJSONPB LogRecordFlags) where
  parseJSONPB (HsJSONPB.String "LOG_RECORD_FLAGS_DO_NOT_USE") =
    Hs.pure LogRecordFlagsLOG_RECORD_FLAGS_DO_NOT_USE
  parseJSONPB (HsJSONPB.String "LOG_RECORD_FLAGS_TRACE_FLAGS_MASK") =
    Hs.pure LogRecordFlagsLOG_RECORD_FLAGS_TRACE_FLAGS_MASK
  parseJSONPB v = HsJSONPB.typeMismatch "LogRecordFlags" v
instance (HsJSONPB.ToJSON LogRecordFlags) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON LogRecordFlags) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsProtobuf.Finite LogRecordFlags)
data LogRecord = LogRecord
  { logRecordTimeUnixNano :: Hs.Word64
  , logRecordObservedTimeUnixNano :: Hs.Word64
  , logRecordSeverityNumber :: (HsProtobuf.Enumerated Opentelemetry.Proto.Logs.V1.Logs.SeverityNumber)
  , logRecordSeverityText :: Hs.Text
  , logRecordBody :: (Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
  , logRecordAttributes :: (Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
  , logRecordDroppedAttributesCount :: Hs.Word32
  , logRecordFlags :: Hs.Word32
  , logRecordTraceId :: Hs.ByteString
  , logRecordSpanId :: Hs.ByteString
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData LogRecord)
instance (HsProtobuf.Named LogRecord) where
  nameOf _ = Hs.fromString "LogRecord"
instance (HsProtobuf.HasDefault LogRecord)
instance (HsProtobuf.Message LogRecord) where
  encodeMessage
    _
    LogRecord
      { logRecordTimeUnixNano
      , logRecordObservedTimeUnixNano
      , logRecordSeverityNumber
      , logRecordSeverityText
      , logRecordBody
      , logRecordAttributes
      , logRecordDroppedAttributesCount
      , logRecordFlags
      , logRecordTraceId
      , logRecordSpanId
      } =
      Hs.mappend
        ( Hs.mappend
            ( Hs.mappend
                ( Hs.mappend
                    ( Hs.mappend
                        ( Hs.mappend
                            ( Hs.mappend
                                ( Hs.mappend
                                    ( Hs.mappend
                                        ( HsProtobuf.encodeMessageField
                                            (HsProtobuf.FieldNumber 1)
                                            ( (Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64))
                                                logRecordTimeUnixNano
                                            )
                                        )
                                        ( HsProtobuf.encodeMessageField
                                            (HsProtobuf.FieldNumber 11)
                                            ( (Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64))
                                                logRecordObservedTimeUnixNano
                                            )
                                        )
                                    )
                                    ( HsProtobuf.encodeMessageField
                                        (HsProtobuf.FieldNumber 2)
                                        logRecordSeverityNumber
                                    )
                                )
                                ( HsProtobuf.encodeMessageField
                                    (HsProtobuf.FieldNumber 3)
                                    ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                                        logRecordSeverityText
                                    )
                                )
                            )
                            ( HsProtobuf.encodeMessageField
                                (HsProtobuf.FieldNumber 5)
                                ( ( Hs.coerce
                                      @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                                      @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
                                  )
                                    logRecordBody
                                )
                            )
                        )
                        ( HsProtobuf.encodeMessageField
                            (HsProtobuf.FieldNumber 6)
                            ( ( Hs.coerce
                                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                              )
                                logRecordAttributes
                            )
                        )
                    )
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 7)
                        logRecordDroppedAttributesCount
                    )
                )
                ( HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 8)
                    ( (Hs.coerce @Hs.Word32 @(HsProtobuf.Fixed Hs.Word32))
                        logRecordFlags
                    )
                )
            )
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 9)
                ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                    logRecordTraceId
                )
            )
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 10)
            ( (Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                logRecordSpanId
            )
        )
  decodeMessage _ =
    Hs.pure LogRecord
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 11)
              )
          )
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 2)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
                @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 5)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 6)
              )
          )
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 7)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word32) @Hs.Word32)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 8)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 9)
              )
          )
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Bytes Hs.ByteString)
                @Hs.ByteString
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 10)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.Fixed64)
        (HsProtobufAST.Single "time_unix_nano")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 11)
        (HsProtobufAST.Prim HsProtobufAST.Fixed64)
        (HsProtobufAST.Single "observed_time_unix_nano")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        ( HsProtobufAST.Prim
            (HsProtobufAST.Named (HsProtobufAST.Single "SeverityNumber"))
        )
        (HsProtobufAST.Single "severity_number")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 3)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "severity_text")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 5)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    ( HsProtobufAST.Path
                        ("opentelemetry" Hs.:| ["proto", "common", "v1", "AnyValue"])
                    )
                )
            )
        )
        (HsProtobufAST.Single "body")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 6)
        ( HsProtobufAST.Repeated
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    ( HsProtobufAST.Path
                        ("opentelemetry" Hs.:| ["proto", "common", "v1", "KeyValue"])
                    )
                )
            )
        )
        (HsProtobufAST.Single "attributes")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 7)
        (HsProtobufAST.Prim HsProtobufAST.UInt32)
        (HsProtobufAST.Single "dropped_attributes_count")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 8)
        (HsProtobufAST.Prim HsProtobufAST.Fixed32)
        (HsProtobufAST.Single "flags")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 9)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "trace_id")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 10)
        (HsProtobufAST.Prim HsProtobufAST.Bytes)
        (HsProtobufAST.Single "span_id")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB LogRecord) where
  toJSONPB (LogRecord f1 f11 f2 f3 f5 f6 f7 f8 f9 f10) =
    HsJSONPB.object
      [ "time_unix_nano"
          .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f1)
      , "observed_time_unix_nano"
          .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f11)
      , "severity_number" .= f2
      , "severity_text"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      , "body"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
               )
                f5
             )
      , "attributes"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
               )
                f6
             )
      , "dropped_attributes_count" .= f7
      , "flags"
          .= ((Hs.coerce @Hs.Word32 @(HsProtobuf.Fixed Hs.Word32)) f8)
      , "trace_id"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f9)
      , "span_id"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f10)
      ]
  toEncodingPB (LogRecord f1 f11 f2 f3 f5 f6 f7 f8 f9 f10) =
    HsJSONPB.pairs
      [ "time_unix_nano"
          .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f1)
      , "observed_time_unix_nano"
          .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f11)
      , "severity_number" .= f2
      , "severity_text"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f3)
      , "body"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
               )
                f5
             )
      , "attributes"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
               )
                f6
             )
      , "dropped_attributes_count" .= f7
      , "flags"
          .= ((Hs.coerce @Hs.Word32 @(HsProtobuf.Fixed Hs.Word32)) f8)
      , "trace_id"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f9)
      , "span_id"
          .= ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f10)
      ]
instance (HsJSONPB.FromJSONPB LogRecord) where
  parseJSONPB =
    HsJSONPB.withObject
      "LogRecord"
      ( \obj ->
          Hs.pure LogRecord
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                    (obj .: "time_unix_nano")
                )
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                    (obj .: "observed_time_unix_nano")
                )
            <*> obj .: "severity_number"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "severity_text")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
                      @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                  )
                    (obj .: "body")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                      @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                  )
                    (obj .: "attributes")
                )
            <*> obj .: "dropped_attributes_count"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word32) @Hs.Word32)
                    (obj .: "flags")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "trace_id")
                )
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString)
                      @Hs.ByteString
                  )
                    (obj .: "span_id")
                )
      )
instance (HsJSONPB.ToJSON LogRecord) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON LogRecord) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema LogRecord) where
  declareNamedSchema _ =
    do
      let declare_time_unix_nano = HsJSONPB.declareSchemaRef
      logRecordTimeUnixNano <- declare_time_unix_nano Proxy.Proxy
      let declare_observed_time_unix_nano = HsJSONPB.declareSchemaRef
      logRecordObservedTimeUnixNano <-
        declare_observed_time_unix_nano
          Proxy.Proxy
      let declare_severity_number = HsJSONPB.declareSchemaRef
      logRecordSeverityNumber <- declare_severity_number Proxy.Proxy
      let declare_severity_text = HsJSONPB.declareSchemaRef
      logRecordSeverityText <- declare_severity_text Proxy.Proxy
      let declare_body = HsJSONPB.declareSchemaRef
      logRecordBody <- declare_body Proxy.Proxy
      let declare_attributes = HsJSONPB.declareSchemaRef
      logRecordAttributes <- declare_attributes Proxy.Proxy
      let declare_dropped_attributes_count = HsJSONPB.declareSchemaRef
      logRecordDroppedAttributesCount <-
        declare_dropped_attributes_count
          Proxy.Proxy
      let declare_flags = HsJSONPB.declareSchemaRef
      logRecordFlags <- declare_flags Proxy.Proxy
      let declare_trace_id = HsJSONPB.declareSchemaRef
      logRecordTraceId <- declare_trace_id Proxy.Proxy
      let declare_span_id = HsJSONPB.declareSchemaRef
      logRecordSpanId <- declare_span_id Proxy.Proxy
      let _ =
            Hs.pure LogRecord
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                      (HsJSONPB.asProxy declare_time_unix_nano)
                  )
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                      (HsJSONPB.asProxy declare_observed_time_unix_nano)
                  )
              <*> HsJSONPB.asProxy declare_severity_number
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_severity_text)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Common.V1.Common.AnyValue)
                        @(Hs.Maybe Opentelemetry.Proto.Common.V1.Common.AnyValue)
                    )
                      (HsJSONPB.asProxy declare_body)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Common.V1.Common.KeyValue)
                        @(Hs.Vector Opentelemetry.Proto.Common.V1.Common.KeyValue)
                    )
                      (HsJSONPB.asProxy declare_attributes)
                  )
              <*> HsJSONPB.asProxy declare_dropped_attributes_count
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word32) @Hs.Word32)
                      (HsJSONPB.asProxy declare_flags)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_trace_id)
                  )
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Bytes Hs.ByteString)
                        @Hs.ByteString
                    )
                      (HsJSONPB.asProxy declare_span_id)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "LogRecord"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "time_unix_nano"
                        , logRecordTimeUnixNano
                        )
                      ,
                        ( "observed_time_unix_nano"
                        , logRecordObservedTimeUnixNano
                        )
                      ,
                        ( "severity_number"
                        , logRecordSeverityNumber
                        )
                      ,
                        ( "severity_text"
                        , logRecordSeverityText
                        )
                      ,
                        ( "body"
                        , logRecordBody
                        )
                      ,
                        ( "attributes"
                        , logRecordAttributes
                        )
                      ,
                        ( "dropped_attributes_count"
                        , logRecordDroppedAttributesCount
                        )
                      ,
                        ( "flags"
                        , logRecordFlags
                        )
                      ,
                        ( "trace_id"
                        , logRecordTraceId
                        )
                      ,
                        ( "span_id"
                        , logRecordSpanId
                        )
                      ]
                }
          }
