{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Opentelemetry.Proto.Collector.Metrics.V1.MetricsService where

import Control.Applicative ((<$>), (<*>), (<|>))
import Control.Applicative qualified as Hs
import Control.DeepSeq qualified as Hs
import Control.Monad qualified as Hs
import Data.ByteString qualified as Hs
import Data.Coerce qualified as Hs
import Data.Int qualified as Hs (Int16, Int32, Int64)
import Data.List.NonEmpty qualified as Hs (NonEmpty (..))
import Data.Map qualified as Hs (Map, mapKeysMonotonic)
import Data.Proxy qualified as Proxy
import Data.String qualified as Hs (fromString)
import Data.Text.Lazy qualified as Hs (Text)
import Data.Vector qualified as Hs (Vector)
import Data.Word qualified as Hs (Word16, Word32, Word64)
import GHC.Enum qualified as Hs
import GHC.Generics qualified as Hs
import Google.Protobuf.Wrappers.Polymorphic qualified as HsProtobuf (
  Wrapped (..),
 )
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (
  serverLoop,
 )
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC (
  serverLoop,
 )
import Opentelemetry.Proto.Metrics.V1.Metrics qualified
import Proto3.Suite.Class qualified as HsProtobuf
import Proto3.Suite.DotProto qualified as HsProtobufAST
import Proto3.Suite.JSONPB ((.:), (.=))
import Proto3.Suite.JSONPB qualified as HsJSONPB
import Proto3.Suite.Types qualified as HsProtobuf
import Proto3.Wire qualified as HsProtobuf
import Proto3.Wire.Decode qualified as HsProtobuf (
  Parser,
  RawField,
 )
import Unsafe.Coerce qualified as Hs
import Prelude qualified as Hs


newtype MetricsService request response = MetricsService
  { metricsServiceExport
      :: ( (request 'HsGRPC.Normal Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsServiceRequest Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsServiceResponse)
           -> (Hs.IO (response 'HsGRPC.Normal Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsServiceResponse))
         )
  }
  deriving (Hs.Generic)
metricsServiceServer
  :: (MetricsService HsGRPC.ServerRequest HsGRPC.ServerResponse)
  -> HsGRPC.ServiceOptions
  -> Hs.IO ()
metricsServiceServer
  MetricsService{metricsServiceExport}
  ( ServiceOptions
      serverHost
      serverPort
      useCompression
      userAgentPrefix
      userAgentSuffix
      initialMetadata
      sslConfig
      logger
      serverMaxReceiveMessageLength
      serverMaxMetadataSize
    ) =
    HsGRPC.serverLoop
      HsGRPC.defaultOptions
        { HsGRPC.optNormalHandlers =
            [ HsGRPC.UnaryHandler
                ( HsGRPC.MethodName
                    "/opentelemetry.proto.collector.metrics.v1.MetricsService/Export"
                )
                (HsGRPC.convertGeneratedServerHandler metricsServiceExport)
            ]
        , HsGRPC.optClientStreamHandlers = []
        , HsGRPC.optServerStreamHandlers = []
        , HsGRPC.optBiDiStreamHandlers = []
        , optServerHost = serverHost
        , optServerPort = serverPort
        , optUseCompression = useCompression
        , optUserAgentPrefix = userAgentPrefix
        , optUserAgentSuffix = userAgentSuffix
        , optInitialMetadata = initialMetadata
        , optSSLConfig = sslConfig
        , optLogger = logger
        , optMaxReceiveMessageLength = serverMaxReceiveMessageLength
        , optMaxMetadataSize = serverMaxMetadataSize
        }
metricsServiceClient
  :: HsGRPC.Client
  -> Hs.IO (MetricsService HsGRPC.ClientRequest HsGRPC.ClientResult)
metricsServiceClient client =
  Hs.pure MetricsService
    <*> ( Hs.pure (HsGRPC.clientRequest client)
            <*> HsGRPC.clientRegisterMethod
              client
              ( HsGRPC.MethodName
                  "/opentelemetry.proto.collector.metrics.v1.MetricsService/Export"
              )
        )
newtype ExportMetricsServiceRequest = ExportMetricsServiceRequest {exportMetricsServiceRequestResourceMetrics :: (Hs.Vector Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportMetricsServiceRequest)
instance (HsProtobuf.Named ExportMetricsServiceRequest) where
  nameOf _ = Hs.fromString "ExportMetricsServiceRequest"
instance (HsProtobuf.HasDefault ExportMetricsServiceRequest)
instance (HsProtobuf.Message ExportMetricsServiceRequest) where
  encodeMessage
    _
    ExportMetricsServiceRequest{exportMetricsServiceRequestResourceMetrics} =
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 1)
          ( ( Hs.coerce
                @(Hs.Vector Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
            )
              exportMetricsServiceRequestResourceMetrics
          )
      )
  decodeMessage _ =
    Hs.pure ExportMetricsServiceRequest
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.NestedVec Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                @(Hs.Vector Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Repeated
            ( HsProtobufAST.Named
                ( HsProtobufAST.Dots
                    ( HsProtobufAST.Path
                        ( "opentelemetry"
                            Hs.:| ["proto", "metrics", "v1", "ResourceMetrics"]
                        )
                    )
                )
            )
        )
        (HsProtobufAST.Single "resource_metrics")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportMetricsServiceRequest) where
  toJSONPB (ExportMetricsServiceRequest f1) =
    HsJSONPB.object
      [ "resource_metrics"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
               )
                f1
             )
      ]
  toEncodingPB (ExportMetricsServiceRequest f1) =
    HsJSONPB.pairs
      [ "resource_metrics"
          .= ( ( Hs.coerce
                  @(Hs.Vector Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                  @(HsProtobuf.NestedVec Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB ExportMetricsServiceRequest) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportMetricsServiceRequest"
      ( \obj ->
          Hs.pure ExportMetricsServiceRequest
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                      @(Hs.Vector Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                  )
                    (obj .: "resource_metrics")
                )
      )
instance (HsJSONPB.ToJSON ExportMetricsServiceRequest) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportMetricsServiceRequest) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportMetricsServiceRequest) where
  declareNamedSchema _ =
    do
      let declare_resource_metrics = HsJSONPB.declareSchemaRef
      exportMetricsServiceRequestResourceMetrics <-
        declare_resource_metrics
          Proxy.Proxy
      let _ =
            Hs.pure ExportMetricsServiceRequest
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.NestedVec Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                        @(Hs.Vector Opentelemetry.Proto.Metrics.V1.Metrics.ResourceMetrics)
                    )
                      (HsJSONPB.asProxy declare_resource_metrics)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ExportMetricsServiceRequest"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "resource_metrics"
                        , exportMetricsServiceRequestResourceMetrics
                        )
                      ]
                }
          }
newtype ExportMetricsServiceResponse = ExportMetricsServiceResponse {exportMetricsServiceResponsePartialSuccess :: (Hs.Maybe Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportMetricsServiceResponse)
instance (HsProtobuf.Named ExportMetricsServiceResponse) where
  nameOf _ = Hs.fromString "ExportMetricsServiceResponse"
instance (HsProtobuf.HasDefault ExportMetricsServiceResponse)
instance (HsProtobuf.Message ExportMetricsServiceResponse) where
  encodeMessage
    _
    ExportMetricsServiceResponse{exportMetricsServiceResponsePartialSuccess} =
      ( HsProtobuf.encodeMessageField
          (HsProtobuf.FieldNumber 1)
          ( ( Hs.coerce
                @(Hs.Maybe Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
            )
              exportMetricsServiceResponsePartialSuccess
          )
      )
  decodeMessage _ =
    Hs.pure ExportMetricsServiceResponse
      <*> ( ( HsProtobuf.coerceOver
                @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                @(Hs.Maybe Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
            )
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        ( HsProtobufAST.Prim
            ( HsProtobufAST.Named
                (HsProtobufAST.Single "ExportMetricsPartialSuccess")
            )
        )
        (HsProtobufAST.Single "partial_success")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportMetricsServiceResponse) where
  toJSONPB (ExportMetricsServiceResponse f1) =
    HsJSONPB.object
      [ "partial_success"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
               )
                f1
             )
      ]
  toEncodingPB (ExportMetricsServiceResponse f1) =
    HsJSONPB.pairs
      [ "partial_success"
          .= ( ( Hs.coerce
                  @(Hs.Maybe Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                  @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
               )
                f1
             )
      ]
instance (HsJSONPB.FromJSONPB ExportMetricsServiceResponse) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportMetricsServiceResponse"
      ( \obj ->
          Hs.pure ExportMetricsServiceResponse
            <*> ( ( HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                      @(Hs.Maybe Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                  )
                    (obj .: "partial_success")
                )
      )
instance (HsJSONPB.ToJSON ExportMetricsServiceResponse) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportMetricsServiceResponse) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportMetricsServiceResponse) where
  declareNamedSchema _ =
    do
      let declare_partial_success = HsJSONPB.declareSchemaRef
      exportMetricsServiceResponsePartialSuccess <-
        declare_partial_success
          Proxy.Proxy
      let _ =
            Hs.pure ExportMetricsServiceResponse
              <*> ( ( HsProtobuf.coerceOver
                        @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                        @(Hs.Maybe Opentelemetry.Proto.Collector.Metrics.V1.MetricsService.ExportMetricsPartialSuccess)
                    )
                      (HsJSONPB.asProxy declare_partial_success)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName =
              Hs.Just
                "ExportMetricsServiceResponse"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "partial_success"
                        , exportMetricsServiceResponsePartialSuccess
                        )
                      ]
                }
          }
data ExportMetricsPartialSuccess = ExportMetricsPartialSuccess
  { exportMetricsPartialSuccessRejectedDataPoints :: Hs.Int64
  , exportMetricsPartialSuccessErrorMessage :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportMetricsPartialSuccess)
instance (HsProtobuf.Named ExportMetricsPartialSuccess) where
  nameOf _ = Hs.fromString "ExportMetricsPartialSuccess"
instance (HsProtobuf.HasDefault ExportMetricsPartialSuccess)
instance (HsProtobuf.Message ExportMetricsPartialSuccess) where
  encodeMessage
    _
    ExportMetricsPartialSuccess
      { exportMetricsPartialSuccessRejectedDataPoints
      , exportMetricsPartialSuccessErrorMessage
      } =
      Hs.mappend
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 1)
            exportMetricsPartialSuccessRejectedDataPoints
        )
        ( HsProtobuf.encodeMessageField
            (HsProtobuf.FieldNumber 2)
            ( (Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                exportMetricsPartialSuccessErrorMessage
            )
        )
  decodeMessage _ =
    Hs.pure ExportMetricsPartialSuccess
      <*> HsProtobuf.at
        HsProtobuf.decodeMessageField
        (HsProtobuf.FieldNumber 1)
      <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 1)
        (HsProtobufAST.Prim HsProtobufAST.Int64)
        (HsProtobufAST.Single "rejected_data_points")
        []
        ""
    , HsProtobufAST.DotProtoField
        (HsProtobuf.FieldNumber 2)
        (HsProtobufAST.Prim HsProtobufAST.String)
        (HsProtobufAST.Single "error_message")
        []
        ""
    ]
instance (HsJSONPB.ToJSONPB ExportMetricsPartialSuccess) where
  toJSONPB (ExportMetricsPartialSuccess f1 f2) =
    HsJSONPB.object
      [ "rejected_data_points" .= f1
      , "error_message"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
  toEncodingPB (ExportMetricsPartialSuccess f1 f2) =
    HsJSONPB.pairs
      [ "rejected_data_points" .= f1
      , "error_message"
          .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)
      ]
instance (HsJSONPB.FromJSONPB ExportMetricsPartialSuccess) where
  parseJSONPB =
    HsJSONPB.withObject
      "ExportMetricsPartialSuccess"
      ( \obj ->
          Hs.pure ExportMetricsPartialSuccess
            <*> obj .: "rejected_data_points"
            <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                    (obj .: "error_message")
                )
      )
instance (HsJSONPB.ToJSON ExportMetricsPartialSuccess) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportMetricsPartialSuccess) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportMetricsPartialSuccess) where
  declareNamedSchema _ =
    do
      let declare_rejected_data_points = HsJSONPB.declareSchemaRef
      exportMetricsPartialSuccessRejectedDataPoints <-
        declare_rejected_data_points
          Proxy.Proxy
      let declare_error_message = HsJSONPB.declareSchemaRef
      exportMetricsPartialSuccessErrorMessage <-
        declare_error_message
          Proxy.Proxy
      let _ =
            Hs.pure ExportMetricsPartialSuccess
              <*> HsJSONPB.asProxy declare_rejected_data_points
              <*> ( (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                      (HsJSONPB.asProxy declare_error_message)
                  )
      Hs.return
        HsJSONPB.NamedSchema
          { HsJSONPB._namedSchemaName = Hs.Just "ExportMetricsPartialSuccess"
          , HsJSONPB._namedSchemaSchema =
              Hs.mempty
                { HsJSONPB._schemaParamSchema =
                    Hs.mempty
                      { HsJSONPB._paramSchemaType =
                          Hs.Just
                            HsJSONPB.SwaggerObject
                      }
                , HsJSONPB._schemaProperties =
                    HsJSONPB.insOrdFromList
                      [
                        ( "rejected_data_points"
                        , exportMetricsPartialSuccessRejectedDataPoints
                        )
                      ,
                        ( "error_message"
                        , exportMetricsPartialSuccessErrorMessage
                        )
                      ]
                }
          }
