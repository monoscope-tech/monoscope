{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Opentelemetry.Proto.Collector.Trace.V1.TraceService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ( (.=), (.:) )
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
    ( Parser, RawField )
import qualified Control.Applicative as Hs
import Control.Applicative ( (<*>), (<|>), (<$>) )
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs ( Int16, Int32, Int64 )
import qualified Data.List.NonEmpty as Hs ( NonEmpty(..) )
import qualified Data.Map as Hs ( Map, mapKeysMonotonic )
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs ( fromString )
import qualified Data.Text.Lazy as Hs ( Text )
import qualified Data.Vector as Hs ( Vector )
import qualified Data.Word as Hs ( Word16, Word32, Word64 )
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
    ( Wrapped(..) )
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC
    hiding ( serverLoop )
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
    ( serverLoop )
import qualified Opentelemetry.Proto.Trace.V1.Trace
newtype TraceService request response
  = TraceService {traceServiceExport :: ((request 'HsGRPC.Normal Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTraceServiceRequest Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTraceServiceResponse)
                                         -> (Hs.IO (response 'HsGRPC.Normal Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTraceServiceResponse)))}
  deriving (Hs.Generic)
traceServiceServer ::
  (TraceService HsGRPC.ServerRequest HsGRPC.ServerResponse)
  -> HsGRPC.ServiceOptions -> Hs.IO ()
traceServiceServer
  TraceService {traceServiceExport}
  (ServiceOptions serverHost serverPort useCompression
                  userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
                  serverMaxReceiveMessageLength serverMaxMetadataSize)
  = HsGRPC.serverLoop
      HsGRPC.defaultOptions
        {HsGRPC.optNormalHandlers = [HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName
                                          "/opentelemetry.proto.collector.trace.v1.TraceService/Export")
                                       (HsGRPC.convertGeneratedServerHandler traceServiceExport)],
         HsGRPC.optClientStreamHandlers = [],
         HsGRPC.optServerStreamHandlers = [],
         HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
         optServerPort = serverPort, optUseCompression = useCompression,
         optUserAgentPrefix = userAgentPrefix,
         optUserAgentSuffix = userAgentSuffix,
         optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
         optLogger = logger,
         optMaxReceiveMessageLength = serverMaxReceiveMessageLength,
         optMaxMetadataSize = serverMaxMetadataSize}
traceServiceClient ::
  HsGRPC.Client
  -> Hs.IO (TraceService HsGRPC.ClientRequest HsGRPC.ClientResult)
traceServiceClient client
  = Hs.pure TraceService
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client
               (HsGRPC.MethodName
                  "/opentelemetry.proto.collector.trace.v1.TraceService/Export"))
newtype ExportTraceServiceRequest
  = ExportTraceServiceRequest {exportTraceServiceRequestResourceSpans :: (Hs.Vector Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportTraceServiceRequest)
instance (HsProtobuf.Named ExportTraceServiceRequest) where
  nameOf _ = Hs.fromString "ExportTraceServiceRequest"
instance (HsProtobuf.HasDefault ExportTraceServiceRequest)
instance (HsProtobuf.Message ExportTraceServiceRequest) where
  encodeMessage
    _
    ExportTraceServiceRequest {exportTraceServiceRequestResourceSpans}
    = (HsProtobuf.encodeMessageField
         (HsProtobuf.FieldNumber 1)
         ((Hs.coerce
             @(Hs.Vector Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans)
             @(HsProtobuf.NestedVec Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans))
            exportTraceServiceRequestResourceSpans))
  decodeMessage _
    = Hs.pure ExportTraceServiceRequest
        <*>
          ((HsProtobuf.coerceOver
              @(HsProtobuf.NestedVec Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans)
              @(Hs.Vector Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans))
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 1)))
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 1)
         (HsProtobufAST.Repeated
            (HsProtobufAST.Named
               (HsProtobufAST.Dots
                  (HsProtobufAST.Path
                     ("opentelemetry"
                        Hs.:| ["proto", "trace", "v1", "ResourceSpans"])))))
         (HsProtobufAST.Single "resource_spans") [] ""]
instance (HsJSONPB.ToJSONPB ExportTraceServiceRequest) where
  toJSONPB (ExportTraceServiceRequest f1)
    = HsJSONPB.object
        ["resource_spans"
           .=
             ((Hs.coerce
                 @(Hs.Vector Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans)
                 @(HsProtobuf.NestedVec Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans))
                f1)]
  toEncodingPB (ExportTraceServiceRequest f1)
    = HsJSONPB.pairs
        ["resource_spans"
           .=
             ((Hs.coerce
                 @(Hs.Vector Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans)
                 @(HsProtobuf.NestedVec Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans))
                f1)]
instance (HsJSONPB.FromJSONPB ExportTraceServiceRequest) where
  parseJSONPB
    = HsJSONPB.withObject
        "ExportTraceServiceRequest"
        (\ obj
           -> Hs.pure ExportTraceServiceRequest
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.NestedVec Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans)
                      @(Hs.Vector Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans))
                     (obj .: "resource_spans")))
instance (HsJSONPB.ToJSON ExportTraceServiceRequest) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportTraceServiceRequest) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportTraceServiceRequest) where
  declareNamedSchema _
    = do let declare_resource_spans = HsJSONPB.declareSchemaRef
         exportTraceServiceRequestResourceSpans <- declare_resource_spans
                                                     Proxy.Proxy
         let _ = Hs.pure ExportTraceServiceRequest
                   <*>
                     ((HsProtobuf.coerceOver
                         @(HsProtobuf.NestedVec Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans)
                         @(Hs.Vector Opentelemetry.Proto.Trace.V1.Trace.ResourceSpans))
                        (HsJSONPB.asProxy declare_resource_spans))
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "ExportTraceServiceRequest",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("resource_spans", 
                                                                                exportTraceServiceRequestResourceSpans)]}}
newtype ExportTraceServiceResponse
  = ExportTraceServiceResponse {exportTraceServiceResponsePartialSuccess :: (Hs.Maybe Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportTraceServiceResponse)
instance (HsProtobuf.Named ExportTraceServiceResponse) where
  nameOf _ = Hs.fromString "ExportTraceServiceResponse"
instance (HsProtobuf.HasDefault ExportTraceServiceResponse)
instance (HsProtobuf.Message ExportTraceServiceResponse) where
  encodeMessage
    _
    ExportTraceServiceResponse {exportTraceServiceResponsePartialSuccess}
    = (HsProtobuf.encodeMessageField
         (HsProtobuf.FieldNumber 1)
         ((Hs.coerce
             @(Hs.Maybe Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess)
             @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess))
            exportTraceServiceResponsePartialSuccess))
  decodeMessage _
    = Hs.pure ExportTraceServiceResponse
        <*>
          ((HsProtobuf.coerceOver
              @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess)
              @(Hs.Maybe Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess))
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 1)))
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 1)
         (HsProtobufAST.Prim
            (HsProtobufAST.Named
               (HsProtobufAST.Single "ExportTracePartialSuccess")))
         (HsProtobufAST.Single "partial_success") [] ""]
instance (HsJSONPB.ToJSONPB ExportTraceServiceResponse) where
  toJSONPB (ExportTraceServiceResponse f1)
    = HsJSONPB.object
        ["partial_success"
           .=
             ((Hs.coerce
                 @(Hs.Maybe Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess)
                 @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess))
                f1)]
  toEncodingPB (ExportTraceServiceResponse f1)
    = HsJSONPB.pairs
        ["partial_success"
           .=
             ((Hs.coerce
                 @(Hs.Maybe Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess)
                 @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess))
                f1)]
instance (HsJSONPB.FromJSONPB ExportTraceServiceResponse) where
  parseJSONPB
    = HsJSONPB.withObject
        "ExportTraceServiceResponse"
        (\ obj
           -> Hs.pure ExportTraceServiceResponse
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess)
                      @(Hs.Maybe Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess))
                     (obj .: "partial_success")))
instance (HsJSONPB.ToJSON ExportTraceServiceResponse) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportTraceServiceResponse) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportTraceServiceResponse) where
  declareNamedSchema _
    = do let declare_partial_success = HsJSONPB.declareSchemaRef
         exportTraceServiceResponsePartialSuccess <- declare_partial_success
                                                       Proxy.Proxy
         let _ = Hs.pure ExportTraceServiceResponse
                   <*>
                     ((HsProtobuf.coerceOver
                         @(HsProtobuf.Nested Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess)
                         @(Hs.Maybe Opentelemetry.Proto.Collector.Trace.V1.TraceService.ExportTracePartialSuccess))
                        (HsJSONPB.asProxy declare_partial_success))
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "ExportTraceServiceResponse",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("partial_success", 
                                                                                exportTraceServiceResponsePartialSuccess)]}}
data ExportTracePartialSuccess
  = ExportTracePartialSuccess {exportTracePartialSuccessRejectedSpans :: Hs.Int64,
                               exportTracePartialSuccessErrorMessage :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ExportTracePartialSuccess)
instance (HsProtobuf.Named ExportTracePartialSuccess) where
  nameOf _ = Hs.fromString "ExportTracePartialSuccess"
instance (HsProtobuf.HasDefault ExportTracePartialSuccess)
instance (HsProtobuf.Message ExportTracePartialSuccess) where
  encodeMessage
    _
    ExportTracePartialSuccess {exportTracePartialSuccessRejectedSpans,
                               exportTracePartialSuccessErrorMessage}
    = Hs.mappend
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 1) exportTracePartialSuccessRejectedSpans)
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2)
           ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
              exportTracePartialSuccessErrorMessage))
  decodeMessage _
    = Hs.pure ExportTracePartialSuccess
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 1)
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2)))
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 1) (HsProtobufAST.Prim HsProtobufAST.Int64)
         (HsProtobufAST.Single "rejected_spans") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "error_message") [] ""]
instance (HsJSONPB.ToJSONPB ExportTracePartialSuccess) where
  toJSONPB (ExportTracePartialSuccess f1 f2)
    = HsJSONPB.object
        ["rejected_spans" .= f1,
         "error_message"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)]
  toEncodingPB (ExportTracePartialSuccess f1 f2)
    = HsJSONPB.pairs
        ["rejected_spans" .= f1,
         "error_message"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f2)]
instance (HsJSONPB.FromJSONPB ExportTracePartialSuccess) where
  parseJSONPB
    = HsJSONPB.withObject
        "ExportTracePartialSuccess"
        (\ obj
           -> Hs.pure ExportTracePartialSuccess <*> obj .: "rejected_spans"
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "error_message")))
instance (HsJSONPB.ToJSON ExportTracePartialSuccess) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ExportTracePartialSuccess) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ExportTracePartialSuccess) where
  declareNamedSchema _
    = do let declare_rejected_spans = HsJSONPB.declareSchemaRef
         exportTracePartialSuccessRejectedSpans <- declare_rejected_spans
                                                     Proxy.Proxy
         let declare_error_message = HsJSONPB.declareSchemaRef
         exportTracePartialSuccessErrorMessage <- declare_error_message
                                                    Proxy.Proxy
         let _ = Hs.pure ExportTracePartialSuccess
                   <*> HsJSONPB.asProxy declare_rejected_spans
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_error_message))
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "ExportTracePartialSuccess",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("rejected_spans", 
                                                                                exportTracePartialSuccessRejectedSpans),
                                                                               ("error_message", 
                                                                                exportTracePartialSuccessErrorMessage)]}}