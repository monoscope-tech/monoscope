module Opentelemetry.OtlpMockValues where
--
-- import Data.Vector qualified as V
-- import Opentelemetry.Proto.Common.V1.Common
-- import Opentelemetry.Proto.Resource.V1.Resource
-- import Opentelemetry.Proto.Trace.V1.Trace as Trace
-- import Proto3.Suite.Types
-- import Relude
--
--
-- formattedLog :: V.Vector ResourceSpans
-- formattedLog =
--   V.fromList
--     [ ResourceSpans
--         { resourceSpansResource =
--             Just
--               ( Resource
--                   { resourceAttributes =
--                       [ KeyValue "service.name" (Just (AnyValue (Just (AnyValueValueStringValue "frontend-proxy"))))
--                       , KeyValue "service.namespace" (Just (AnyValue (Just (AnyValueValueStringValue "opentelemetry-demo"))))
--                       , KeyValue "service.version" (Just (AnyValue (Just (AnyValueValueStringValue "1.11.1"))))
--                       ]
--                   , resourceDroppedAttributesCount = 0
--                   }
--               )
--         , resourceSpansScopeSpans =
--             [ ScopeSpans
--                 { scopeSpansScope =
--                     Just
--                       ( InstrumentationScope
--                           { instrumentationScopeName = ""
--                           , instrumentationScopeVersion = ""
--                           , instrumentationScopeAttributes = []
--                           , instrumentationScopeDroppedAttributesCount = 0
--                           }
--                       )
--                 , scopeSpansSpans =
--                     [ Span
--                         { spanTraceId = "\150,,eE\185\CANTz\189&\171\SYN\188\166\203"
--                         , spanSpanId = "\205\n\DEL\224\128m\229&"
--                         , spanTraceState = ""
--                         , spanParentSpanId = "\148\181\t \184\210\163\US"
--                         , spanFlags = 0
--                         , spanName = "router frontend egress"
--                         , spanKind = Enumerated{enumerated = Right Span_SpanKindSPAN_KIND_CLIENT}
--                         , spanStartTimeUnixNano = 1728232944845477000
--                         , spanEndTimeUnixNano = 1728232944854392000
--                         , spanAttributes =
--                             [ KeyValue "http.protocol" (Just (AnyValue (Just (AnyValueValueStringValue "HTTP/1.1"))))
--                             , KeyValue "upstream_address" (Just (AnyValue (Just (AnyValueValueStringValue "192.168.0.20:8080"))))
--                             , KeyValue "peer.address" (Just (AnyValue (Just (AnyValueValueStringValue "192.168.0.20:8080"))))
--                             , KeyValue "component" (Just (AnyValue (Just (AnyValueValueStringValue "proxy"))))
--                             , KeyValue "upstream_cluster" (Just (AnyValue (Just (AnyValueValueStringValue "frontend"))))
--                             , KeyValue "upstream_cluster.name" (Just (AnyValue (Just (AnyValueValueStringValue "frontend"))))
--                             , KeyValue "http.status_code" (Just (AnyValue (Just (AnyValueValueStringValue "200"))))
--                             , KeyValue "response_flags" (Just (AnyValue (Just (AnyValueValueStringValue "-"))))
--                             , KeyValue "at-project-id" (Just (AnyValue (Just (AnyValueValueStringValue "00000000-0000-0000-0000-000000000000"))))
--                             ]
--                         , spanDroppedAttributesCount = 0
--                         , spanEvents = []
--                         , spanDroppedEventsCount = 0
--                         , spanLinks = []
--                         , spanDroppedLinksCount = 0
--                         , spanStatus =
--                             Just
--                               ( Status
--                                   { statusMessage = ""
--                                   , statusCode = Enumerated{enumerated = Right Status_StatusCodeSTATUS_CODE_UNSET}
--                                   }
--                               )
--                         }
--                     , Span
--                         { spanTraceId = "\150,,eE\185\CANTz\189&\171\SYN\188\166\203"
--                         , spanSpanId = "\148\181\t \184\210\163\US"
--                         , spanTraceState = ""
--                         , spanParentSpanId = "o\212\241f\147k\185{"
--                         , spanFlags = 0
--                         , spanName = "ingress"
--                         , spanKind = Enumerated{enumerated = Right Span_SpanKindSPAN_KIND_SERVER}
--                         , spanStartTimeUnixNano = 1728232944845111000
--                         , spanEndTimeUnixNano = 1728232944854489000
--                         , spanAttributes =
--                             [ KeyValue "node_id" (Just (AnyValue (Just (AnyValueValueStringValue ""))))
--                             , KeyValue "zone" (Just (AnyValue (Just (AnyValueValueStringValue ""))))
--                             , KeyValue "guid:x-request-id" (Just (AnyValue (Just (AnyValueValueStringValue "f9c9e751-ed61-9fa1-8326-6352907688ac"))))
--                             , KeyValue "http.url" (Just (AnyValue (Just (AnyValueValueStringValue "http://frontend-proxy:8084/api/products/HQTGWGPNH4"))))
--                             , KeyValue "http.method" (Just (AnyValue (Just (AnyValueValueStringValue "GET"))))
--                             , KeyValue "downstream_cluster" (Just (AnyValue (Just (AnyValueValueStringValue "-"))))
--                             , KeyValue "user_agent" (Just (AnyValue (Just (AnyValueValueStringValue "python-requests/2.31.0"))))
--                             , KeyValue "http.protocol" (Just (AnyValue (Just (AnyValueValueStringValue "HTTP/1.1"))))
--                             , KeyValue "peer.address" (Just (AnyValue (Just (AnyValueValueStringValue "192.168.0.21"))))
--                             , KeyValue "request_size" (Just (AnyValue (Just (AnyValueValueStringValue "0"))))
--                             , KeyValue "response_size" (Just (AnyValue (Just (AnyValueValueStringValue "741"))))
--                             , KeyValue "component" (Just (AnyValue (Just (AnyValueValueStringValue "proxy"))))
--                             , KeyValue "upstream_cluster" (Just (AnyValue (Just (AnyValueValueStringValue "frontend"))))
--                             , KeyValue "upstream_cluster.name" (Just (AnyValue (Just (AnyValueValueStringValue "frontend"))))
--                             , KeyValue "http.status_code" (Just (AnyValue (Just (AnyValueValueStringValue "200"))))
--                             , KeyValue "response_flags" (Just (AnyValue (Just (AnyValueValueStringValue "-"))))
--                             , KeyValue "at-project-id" (Just (AnyValue (Just (AnyValueValueStringValue "00000000-0000-0000-0000-000000000000"))))
--                             ]
--                         , spanDroppedAttributesCount = 0
--                         , spanEvents = []
--                         , spanDroppedEventsCount = 0
--                         , spanLinks = []
--                         , spanDroppedLinksCount = 0
--                         , spanStatus =
--                             Just
--                               ( Status
--                                   { statusMessage = ""
--                                   , statusCode = Enumerated{enumerated = Right Status_StatusCodeSTATUS_CODE_UNSET}
--                                   }
--                               )
--                         }
--                     ]
--                 , scopeSpansSchemaUrl = ""
--                 }
--             ]
--         , resourceSpansSchemaUrl = ""
--         }
--     ]
--
--
-- otlpTraceB64A :: Text
-- otlpTraceB64A = ""
--
--
-- -- This currently can't be unmarkshalled
-- otlpTraceB64B :: Text
-- otlpTraceB64B = "CpIFCsgDChsKCWhvc3QubmFtZRIOCgw4YzY1ZmZkMDM0Y2QKoQEKDm9zLmRlc2NyaXB0aW9uEo4BCosBRGViaWFuIEdOVS9MaW51eCBEZWJpYW4gR05VL0xpbnV4IDEyIChib29rd29ybSkgKExpbnV4IDhjNjVmZmQwMzRjZCA1LjE1LjAtMTA2LWdlbmVyaWMgIzExNi1VYnVudHUgU01QIFdlZCBBcHIgMTcgMDk6MTc6NTYgVVRDIDIwMjQgeDg2XzY0KQoSCgdvcy50eXBlEgcKBWxpbnV4CiUKF3Byb2Nlc3MucnVudGltZS52ZXJzaW9uEgoKCGdvMS4yMy4wChcKDHNlcnZpY2UubmFtZRIHCgVmbGFnZAopChFzZXJ2aWNlLm5hbWVzcGFjZRIUChJvcGVudGVsZW1ldHJ5LWRlbW8KHAoPc2VydmljZS52ZXJzaW9uEgkKB3YwLjExLjIKHgoWdGVsZW1ldHJ5LnNkay5sYW5ndWFnZRIECgJnbwolChJ0ZWxlbWV0cnkuc2RrLm5hbWUSDwoNb3BlbnRlbGVtZXRyeQohChV0ZWxlbWV0cnkuc2RrLnZlcnNpb24SCAoGMS4yOC4wEpsBCg8KDWpzb25FdmFsdWF0b3IShwEKEDJAJawaV8cMxacdrvAF6PYSCGJA9CxGkpM/IggqZrImPK1BKSoKcmVzb2x2ZUludDABOZOY/sgQ7fsXQdzN/sgQ7fsXSjcKDWF0LXByb2plY3QtaWQSJgokMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwegCFAQABAAAaJ2h0dHBzOi8vb3BlbnRlbGVtZXRyeS5pby9zY2hlbWFzLzEuMjYuMAqSBgrIAwobCglob3N0Lm5hbWUSDgoMOGM2NWZmZDAzNGNkCqEBCg5vcy5kZXNjcmlwdGlvbhKOAQqLAURlYmlhbiBHTlUvTGludXggRGViaWFuIEdOVS9MaW51eCAxMiAoYm9va3dvcm0pIChMaW51eCA4YzY1ZmZkMDM0Y2QgNS4xNS4wLTEwNi1nZW5lcmljICMxMTYtVWJ1bnR1IFNNUCBXZWQgQXByIDE3IDA5OjE3OjU2IFVUQyAyMDI0IHg4Nl82NCkKEgoHb3MudHlwZRIHCgVsaW51eAolChdwcm9jZXNzLnJ1bnRpbWUudmVyc2lvbhIKCghnbzEuMjMuMAoXCgxzZXJ2aWNlLm5hbWUSBwoFZmxhZ2QKKQoRc2VydmljZS5uYW1lc3BhY2USFAoSb3BlbnRlbGVtZXRyeS1kZW1vChwKD3NlcnZpY2UudmVyc2lvbhIJCgd2MC4xMS4yCh4KFnRlbGVtZXRyeS5zZGsubGFuZ3VhZ2USBAoCZ28KJQoSdGVsZW1ldHJ5LnNkay5uYW1lEg8KDW9wZW50ZWxlbWV0cnkKIQoVdGVsZW1ldHJ5LnNkay52ZXJzaW9uEggKBjEuMjguMBKbAgoXChVmbGFnRXZhbHVhdGlvblNlcnZpY2US/wEKEDJAJawaV8cMxacdrvAF6PYSCCpmsiY8rUEpIghcKNr8zyyP2CoKcmVzb2x2ZUludDACOWlj/sgQ7fsXQcHeAMkQ7fsXSjAKEGZlYXR1cmVfZmxhZy5rZXkSHAoabG9hZGdlbmVyYXRvckZsb29kSG9tZXBhZ2VKHQoUZmVhdHVyZV9mbGFnLnZhcmlhbnQSBQoDb2ZmSiUKGmZlYXR1cmVfZmxhZy5wcm92aWRlcl9uYW1lEgcKBWZsYWdkSjcKDWF0LXByb2plY3QtaWQSJgokMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwegCFAQABAAAaJ2h0dHBzOi8vb3BlbnRlbGVtZXRyeS5pby9zY2hlbWFzLzEuMjYuMAqnCArIAwobCglob3N0Lm5hbWUSDgoMOGM2NWZmZDAzNGNkCqEBCg5vcy5kZXNjcmlwdGlvbhKOAQqLAURlYmlhbiBHTlUvTGludXggRGViaWFuIEdOVS9MaW51eCAxMiAoYm9va3dvcm0pIChMaW51eCA4YzY1ZmZkMDM0Y2QgNS4xNS4wLTEwNi1nZW5lcmljICMxMTYtVWJ1bnR1IFNNUCBXZWQgQXByIDE3IDA5OjE3OjU2IFVUQyAyMDI0IHg4Nl82NCkKEgoHb3MudHlwZRIHCgVsaW51eAolChdwcm9jZXNzLnJ1bnRpbWUudmVyc2lvbhIKCghnbzEuMjMuMAoXCgxzZXJ2aWNlLm5hbWUSBwoFZmxhZ2QKKQoRc2VydmljZS5uYW1lc3BhY2USFAoSb3BlbnRlbGVtZXRyeS1kZW1vChwKD3NlcnZpY2UudmVyc2lvbhIJCgd2MC4xMS4yCh4KFnRlbGVtZXRyeS5zZGsubGFuZ3VhZ2USBAoCZ28KJQoSdGVsZW1ldHJ5LnNkay5uYW1lEg8KDW9wZW50ZWxlbWV0cnkKIQoVdGVsZW1ldHJ5LnNkay52ZXJzaW9uEggKBjEuMjguMBKwBAouChpjb25uZWN0cnBjLmNvbS9vdGVsY29ubmVjdBIQc2VtdmVyOjAuNi4wLWRldhL9AwoQMkAlrBpXxwzFpx2u8AXo9hIIXCja/M8sj9giACocc2NoZW1hLnYxLlNlcnZpY2UvUmVzb2x2ZUludDACOQzh/cgQ7fsXQYOrAckQ7fsXSh8KDW5ldC5wZWVyLm5hbWUSDgoMMTkyLjE2OC4wLjIxShUKDW5ldC5wZWVyLnBvcnQSBBimrwNKFAoKcnBjLnN5c3RlbRIGCgRncnBjSiIKC3JwYy5zZXJ2aWNlEhMKEXNjaGVtYS52MS5TZXJ2aWNlShoKCnJwYy5tZXRob2QSDAoKUmVzb2x2ZUludEoaChRycGMuZ3JwYy5zdGF0dXNfY29kZRICGABKNwoNYXQtcHJvamVjdC1pZBImCiQwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDBaYQlMSP7IEO37FxIHbWVzc2FnZRoaCgxtZXNzYWdlLnR5cGUSCgoIUkVDRUlWRUQaEAoKbWVzc2FnZS5pZBICGAEaHwoZbWVzc2FnZS51bmNvbXByZXNzZWRfc2l6ZRICGDJaXQmfMwHJEO37FxIHbWVzc2FnZRoWCgxtZXNzYWdlLnR5cGUSBgoEU0VOVBoQCgptZXNzYWdlLmlkEgIYARofChltZXNzYWdlLnVuY29tcHJlc3NlZF9zaXplEgIYD3oAhQEAAQAAGidodHRwczovL29wZW50ZWxlbWV0cnkuaW8vc2NoZW1hcy8xLjI2LjAKxwUKzQIKNwoNYXQtcHJvamVjdC1pZBImCiRlMDY4ZmZiYS0zYjcwLTQ1ZDMtYTI1Yi1mOTQ3NjNjYTRjMWMKRAoOYXQtcHJvamVjdC1rZXkSMgowa0s4WmVzZEtiSG96bVlFWWpxWnNTajFMOUdIQ0hkcWU2Kys4ZzdwWHF6NEdwNHFWCiAKDHNlcnZpY2UubmFtZRIQCg5XZW5wYXlBZG1pbkFwaQo9ChNzZXJ2aWNlLmluc3RhbmNlLmlkEiYKJGQ4ZjAyNDZhLTJjMTktNGQxOS04NTAxLWI1ODJiOTY2ZGNiOAolChJ0ZWxlbWV0cnkuc2RrLm5hbWUSDwoNb3BlbnRlbGVtZXRyeQoiChZ0ZWxlbWV0cnkuc2RrLmxhbmd1YWdlEggKBmRvdG5ldAogChV0ZWxlbWV0cnkuc2RrLnZlcnNpb24SBwoFMS45LjAS9AIKFgoUTWljcm9zb2Z0LkFzcE5ldENvcmUS2QIKECpyVPZJ0/PZvXBZjpEMvMgSCNU29WQaIlhRIgAqDEdFVCAvX2hlYWx0aDACOeR3EtAQ7fsXQThEKtQQ7fsXSiAKDnNlcnZlci5hZGRyZXNzEg4KDDEwLjAuMTM5LjIzM0oSCgtzZXJ2ZXIucG9ydBIDGJA/ShwKE2h0dHAucmVxdWVzdC5tZXRob2QSBQoDR0VUShQKCnVybC5zY2hlbWUSBgoEaHR0cEoWCgh1cmwucGF0aBIKCggvX2hlYWx0aEohChhuZXR3b3JrLnByb3RvY29sLnZlcnNpb24SBQoDMS4xSi4KE3VzZXJfYWdlbnQub3JpZ2luYWwSFwoVRUxCLUhlYWx0aENoZWNrZXIvMi4wShgKCmh0dHAucm91dGUSCgoIL19oZWFsdGhKIAoZaHR0cC5yZXNwb25zZS5zdGF0dXNfY29kZRIDGMgBegCFAQEBAAA="
--
--
-- otlpTraceB64C :: Text
-- otlpTraceB64C = "Cv8ECssCCjcKDWF0LXByb2plY3QtaWQSJgokZTA2OGZmYmEtM2I3MC00NWQzLWEyNWItZjk0NzYzY2E0YzFjCkQKDmF0LXByb2plY3Qta2V5EjIKMGtLOFplc2RLYkhvem1ZRVlqcVpzU2oxTDlHSENIZHFlNisrOGc3cFhxejRHcDRxVgoeCgxzZXJ2aWNlLm5hbWUSDgoMV2VucGF5V2ViQXBpCj0KE3NlcnZpY2UuaW5zdGFuY2UuaWQSJgokMmI2NDg4NzktZjU2YS00NzRkLTlhZmQtMDFiZTBhMGMzMjEyCiUKEnRlbGVtZXRyeS5zZGsubmFtZRIPCg1vcGVudGVsZW1ldHJ5CiIKFnRlbGVtZXRyeS5zZGsubGFuZ3VhZ2USCAoGZG90bmV0CiAKFXRlbGVtZXRyeS5zZGsudmVyc2lvbhIHCgUxLjkuMBKuAgoWChRNaWNyb3NvZnQuQXNwTmV0Q29yZRKTAgoQHer5zeGcxkaU4qIFwDivPRIIMNKQdGox41wiACoDR0VUMAI58CogoBnt+xdBtMU/pBnt+xdKHwoOc2VydmVyLmFkZHJlc3MSDQoLMTAuMC4xNDEuNjFKEgoLc2VydmVyLnBvcnQSAxiQP0ocChNodHRwLnJlcXVlc3QubWV0aG9kEgUKA0dFVEoUCgp1cmwuc2NoZW1lEgYKBGh0dHBKFgoIdXJsLnBhdGgSCgoIL19oZWFsdGhKIQoYbmV0d29yay5wcm90b2NvbC52ZXJzaW9uEgUKAzEuMUouChN1c2VyX2FnZW50Lm9yaWdpbmFsEhcKFUVMQi1IZWFsdGhDaGVja2VyLzIuMHoAhQEBAQAACv8ECssCCjcKDWF0LXByb2plY3QtaWQSJgokZTA2OGZmYmEtM2I3MC00NWQzLWEyNWItZjk0NzYzY2E0YzFjCkQKDmF0LXByb2plY3Qta2V5EjIKMGtLOFplc2RLYkhvem1ZRVlqcVpzU2oxTDlHSENIZHFlNisrOGc3cFhxejRHcDRxVgoeCgxzZXJ2aWNlLm5hbWUSDgoMV2VucGF5V2ViQXBpCj0KE3NlcnZpY2UuaW5zdGFuY2UuaWQSJgokMmI2NDg4NzktZjU2YS00NzRkLTlhZmQtMDFiZTBhMGMzMjEyCiUKEnRlbGVtZXRyeS5zZGsubmFtZRIPCg1vcGVudGVsZW1ldHJ5CiIKFnRlbGVtZXRyeS5zZGsubGFuZ3VhZ2USCAoGZG90bmV0CiAKFXRlbGVtZXRyeS5zZGsudmVyc2lvbhIHCgUxLjkuMBKuAgoWChRNaWNyb3NvZnQuQXNwTmV0Q29yZRKTAgoQKJ7ZSySe6Vx8qO18L7vQ7BIISLsPs/oL6TQiACoDR0VUMAI5RJUorBnt+xdBqI9DsBnt+xdKHwoOc2VydmVyLmFkZHJlc3MSDQoLMTAuMC4xNDEuNjFKEgoLc2VydmVyLnBvcnQSAxiQP0ocChNodHRwLnJlcXVlc3QubWV0aG9kEgUKA0dFVEoUCgp1cmwuc2NoZW1lEgYKBGh0dHBKFgoIdXJsLnBhdGgSCgoIL19oZWFsdGhKIQoYbmV0d29yay5wcm90b2NvbC52ZXJzaW9uEgUKAzEuMUouChN1c2VyX2FnZW50Lm9yaWdpbmFsEhcKFUVMQi1IZWFsdGhDaGVja2VyLzIuMHoAhQEBAQAA"
